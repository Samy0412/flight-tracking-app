{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Asset } from 'expo-asset';\nimport Constants from 'expo-constants';\nimport { Platform } from '@unimodules/core';\nimport ExpoFontLoader from \"./ExpoFontLoader\";\nvar isWeb = Platform.OS === 'web';\nvar isInClient = !isWeb && Constants.appOwnership === 'expo';\nvar isInIOSStandalone = Constants.appOwnership === 'standalone' && Platform.OS === 'ios';\nvar loaded = {};\nvar loadPromises = {};\nfunction fontFamilyNeedsScoping(name) {\n  return (isInClient || isInIOSStandalone) && !Constants.systemFonts.includes(name) && name !== 'System' && !name.includes(Constants.sessionId);\n}\nexport function processFontFamily(name) {\n  if (!name || !fontFamilyNeedsScoping(name)) {\n    return name;\n  }\n  if (!isLoaded(name)) {\n    if (__DEV__) {\n      if (isLoading(name)) {\n        console.error(\"You started loading the font \\\"\" + name + \"\\\", but used it before it finished loading.\\n\\n- You need to wait for Font.loadAsync to complete before using the font.\\n\\n- We recommend loading all fonts before rendering the app, and rendering only Expo.AppLoading while waiting for loading to complete.\");\n      } else {\n        console.error(\"fontFamily \\\"\" + name + \"\\\" is not a system font and has not been loaded through Font.loadAsync.\\n\\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\\n- If this is a custom font, be sure to load it with Font.loadAsync.\");\n      }\n    }\n    return 'System';\n  }\n  return \"ExpoFont-\" + _getNativeFontName(name);\n}\nexport function isLoaded(name) {\n  return loaded.hasOwnProperty(name);\n}\nexport function isLoading(name) {\n  return loadPromises.hasOwnProperty(name);\n}\nexport function loadAsync(nameOrMap, source) {\n  var fontMap, names, name, asset;\n  return _regeneratorRuntime.async(function loadAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!(typeof nameOrMap === 'object')) {\n            _context2.next = 6;\n            break;\n          }\n          fontMap = nameOrMap;\n          names = Object.keys(fontMap);\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(Promise.all(names.map(function (name) {\n            return loadAsync(name, fontMap[name]);\n          })));\n        case 5:\n          return _context2.abrupt(\"return\");\n        case 6:\n          name = nameOrMap;\n          if (!loaded[name]) {\n            _context2.next = 9;\n            break;\n          }\n          return _context2.abrupt(\"return\");\n        case 9:\n          if (!loadPromises[name]) {\n            _context2.next = 11;\n            break;\n          }\n          return _context2.abrupt(\"return\", loadPromises[name]);\n        case 11:\n          if (source) {\n            _context2.next = 13;\n            break;\n          }\n          throw new Error(\"No source from which to load font \\\"\" + name + \"\\\"\");\n        case 13:\n          asset = _getAssetForSource(source);\n          loadPromises[name] = function _callee() {\n            return _regeneratorRuntime.async(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    _context.next = 3;\n                    return _regeneratorRuntime.awrap(_loadSingleFontAsync(name, asset));\n                  case 3:\n                    loaded[name] = true;\n                  case 4:\n                    _context.prev = 4;\n                    delete loadPromises[name];\n                    return _context.finish(4);\n                  case 7:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, null, null, [[0,, 4, 7]]);\n          }();\n          _context2.next = 17;\n          return _regeneratorRuntime.awrap(loadPromises[name]);\n        case 17:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  });\n}\nfunction _getAssetForSource(source) {\n  if (source instanceof Asset) {\n    return source;\n  }\n  if (!isWeb && typeof source === 'string') {\n    return Asset.fromURI(source);\n  }\n  if (isWeb || typeof source === 'number') {\n    return Asset.fromModule(source);\n  }\n  return source;\n}\nfunction _loadSingleFontAsync(name, asset) {\n  return _regeneratorRuntime.async(function _loadSingleFontAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(asset.downloadAsync());\n        case 2:\n          if (asset.downloaded) {\n            _context3.next = 4;\n            break;\n          }\n          throw new Error(\"Failed to download asset for font \\\"\" + name + \"\\\"\");\n        case 4:\n          _context3.next = 6;\n          return _regeneratorRuntime.awrap(ExpoFontLoader.loadAsync(_getNativeFontName(name), asset.localUri));\n        case 6:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  });\n}\nfunction _getNativeFontName(name) {\n  if (fontFamilyNeedsScoping(name)) {\n    return Constants.sessionId + \"-\" + name;\n  } else {\n    return name;\n  }\n}\nif (module && module.exports) {\n  var wasImportWarningShown = false;\n  Object.defineProperty(exports, 'Font', {\n    get: function get() {\n      if (!wasImportWarningShown) {\n        console.warn(\"The syntax \\\"import { Font } from 'expo-font'\\\" is deprecated. Use \\\"import * as Font from 'expo-font'\\\" or import named exports instead. Support for the old syntax will be removed in SDK 33.\");\n        wasImportWarningShown = true;\n      }\n      return {\n        processFontFamily: processFontFamily,\n        isLoaded: isLoaded,\n        isLoading: isLoading,\n        loadAsync: loadAsync\n      };\n    }\n  });\n}","map":{"version":3,"names":["Asset","Constants","Platform","ExpoFontLoader","isWeb","OS","isInClient","appOwnership","isInIOSStandalone","loaded","loadPromises","fontFamilyNeedsScoping","name","systemFonts","includes","sessionId","processFontFamily","isLoaded","__DEV__","isLoading","console","error","_getNativeFontName","hasOwnProperty","loadAsync","nameOrMap","source","fontMap","names","asset","_regeneratorRuntime","async","loadAsync$","_context2","prev","next","Object","keys","awrap","Promise","all","map","abrupt","Error","_getAssetForSource","_callee","_callee$","_context","_loadSingleFontAsync","finish","stop","fromURI","fromModule","_loadSingleFontAsync$","_context3","downloadAsync","downloaded","localUri","module","exports","wasImportWarningShown","defineProperty","get","warn"],"sources":["/Users/sammerinio/Documents/flight-tracking-app/node_modules/expo-font/src/Font.ts"],"sourcesContent":["import { Asset } from 'expo-asset';\nimport Constants from 'expo-constants';\nimport { Platform } from '@unimodules/core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\n\n/**\n * A font source can be a URI, a module ID, or an Expo Asset.\n */\ntype FontSource = string | number | Asset;\n\nconst isWeb = Platform.OS === 'web';\nconst isInClient = !isWeb && Constants.appOwnership === 'expo';\nconst isInIOSStandalone = Constants.appOwnership === 'standalone' && Platform.OS === 'ios';\n\nconst loaded: { [name: string]: boolean } = {};\nconst loadPromises: { [name: string]: Promise<void> } = {};\n\nfunction fontFamilyNeedsScoping(name: string): boolean {\n  return (\n    (isInClient || isInIOSStandalone) &&\n    !Constants.systemFonts.includes(name) &&\n    name !== 'System' &&\n    !name.includes(Constants.sessionId)\n  );\n}\n\n/**\n * Used to transform font family names to the scoped name. This does not need to\n * be called in standalone or bare apps but it will return unscoped font family\n * names if it is called in those contexts.\n * note(brentvatne): at some point we may want to warn if this is called\n * outside of a managed app.\n */\nexport function processFontFamily(name: string | null): string | null {\n  if (!name || !fontFamilyNeedsScoping(name)) {\n    return name;\n  }\n\n  if (!isLoaded(name)) {\n    if (__DEV__) {\n      if (isLoading(name)) {\n        console.error(\n          `You started loading the font \"${name}\", but used it before it finished loading.\\n\n- You need to wait for Font.loadAsync to complete before using the font.\\n\n- We recommend loading all fonts before rendering the app, and rendering only Expo.AppLoading while waiting for loading to complete.`\n        );\n      } else {\n        console.error(\n          `fontFamily \"${name}\" is not a system font and has not been loaded through Font.loadAsync.\\n\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\n- If this is a custom font, be sure to load it with Font.loadAsync.`\n        );\n      }\n    }\n\n    return 'System';\n  }\n\n  return `ExpoFont-${_getNativeFontName(name)}`;\n}\n\nexport function isLoaded(name: string): boolean {\n  return loaded.hasOwnProperty(name);\n}\n\nexport function isLoading(name: string): boolean {\n  return loadPromises.hasOwnProperty(name);\n}\n\nexport async function loadAsync(\n  nameOrMap: string | { [name: string]: FontSource },\n  source?: FontSource\n): Promise<void> {\n  if (typeof nameOrMap === 'object') {\n    const fontMap = nameOrMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map(name => loadAsync(name, fontMap[name])));\n    return;\n  }\n\n  const name = nameOrMap;\n\n  if (loaded[name]) {\n    return;\n  }\n\n  if (loadPromises[name]) {\n    return loadPromises[name];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  if (!source) {\n    throw new Error(`No source from which to load font \"${name}\"`);\n  }\n  const asset = _getAssetForSource(source);\n  loadPromises[name] = (async () => {\n    try {\n      await _loadSingleFontAsync(name, asset);\n      loaded[name] = true;\n    } finally {\n      delete loadPromises[name];\n    }\n  })();\n\n  await loadPromises[name];\n}\n\nfunction _getAssetForSource(source: FontSource): Asset {\n  if (source instanceof Asset) {\n    return source;\n  }\n\n  if (!isWeb && typeof source === 'string') {\n    return Asset.fromURI(source);\n  }\n\n  if (isWeb || typeof source === 'number') {\n    return Asset.fromModule(source);\n  }\n\n  // @ts-ignore Error: Type 'string' is not assignable to type 'Asset'\n  // We can't have a string here, we would have thrown an error if !isWeb\n  // or returned Asset.fromModule if isWeb.\n  return source;\n}\n\nasync function _loadSingleFontAsync(name: string, asset: Asset): Promise<void> {\n  await asset.downloadAsync();\n  if (!asset.downloaded) {\n    throw new Error(`Failed to download asset for font \"${name}\"`);\n  }\n  await ExpoFontLoader.loadAsync(_getNativeFontName(name), asset.localUri);\n}\n\nfunction _getNativeFontName(name: string): string {\n  if (fontFamilyNeedsScoping(name)) {\n    return `${Constants.sessionId}-${name}`;\n  } else {\n    return name;\n  }\n}\n\ndeclare var module: any;\n\nif (module && module.exports) {\n  let wasImportWarningShown = false;\n  // @ts-ignore: Temporarily define an export named \"Font\" for legacy compatibility\n  Object.defineProperty(exports, 'Font', {\n    get() {\n      if (!wasImportWarningShown) {\n        console.warn(\n          `The syntax \"import { Font } from 'expo-font'\" is deprecated. Use \"import * as Font from 'expo-font'\" or import named exports instead. Support for the old syntax will be removed in SDK 33.`\n        );\n        wasImportWarningShown = true;\n      }\n      return {\n        processFontFamily,\n        isLoaded,\n        isLoading,\n        loadAsync,\n      };\n    },\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}