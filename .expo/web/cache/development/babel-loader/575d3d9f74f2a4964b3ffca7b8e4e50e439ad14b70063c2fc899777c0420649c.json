{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/sammerinio/Documents/flight-tracking-app/node_modules/react-navigation-drawer/dist/views/DrawerView.js\";\nimport React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { ThemeColors, ThemeContext, SceneView } from '@react-navigation/core';\nimport DrawerLayout from 'react-native-gesture-handler/DrawerLayout';\nimport { ScreenContainer } from 'react-native-screens';\nimport DrawerActions from \"../routers/DrawerActions\";\nimport DrawerSidebar from \"./DrawerSidebar\";\nimport DrawerGestureContext from \"../utils/DrawerGestureContext\";\nimport ResourceSavingScene from \"../views/ResourceSavingScene\";\nvar DrawerView = function (_React$PureComponent) {\n  _inherits(DrawerView, _React$PureComponent);\n  function DrawerView() {\n    var _getPrototypeOf2;\n    var _this;\n    _classCallCheck(this, DrawerView);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DrawerView)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      loaded: [_this.props.navigation.state.index],\n      drawerWidth: typeof _this.props.navigationConfig.drawerWidth === 'function' ? _this.props.navigationConfig.drawerWidth() : _this.props.navigationConfig.drawerWidth\n    };\n    _this.drawerGestureRef = React.createRef();\n    _this._handleDrawerStateChange = function (newState, willShow) {\n      if (newState === 'Idle') {\n        if (!_this.props.navigation.state.isDrawerIdle) {\n          _this.props.navigation.dispatch({\n            type: DrawerActions.MARK_DRAWER_IDLE,\n            key: _this.props.navigation.state.key\n          });\n        }\n      } else if (newState === 'Settling') {\n        _this.props.navigation.dispatch({\n          type: DrawerActions.MARK_DRAWER_SETTLING,\n          key: _this.props.navigation.state.key,\n          willShow: willShow\n        });\n      } else {\n        if (_this.props.navigation.state.isDrawerIdle) {\n          _this.props.navigation.dispatch({\n            type: DrawerActions.MARK_DRAWER_ACTIVE,\n            key: _this.props.navigation.state.key\n          });\n        }\n      }\n    };\n    _this._handleDrawerOpen = function () {\n      _this.props.navigation.dispatch({\n        type: DrawerActions.DRAWER_OPENED,\n        key: _this.props.navigation.state.key\n      });\n    };\n    _this._handleDrawerClose = function () {\n      _this.props.navigation.dispatch({\n        type: DrawerActions.DRAWER_CLOSED,\n        key: _this.props.navigation.state.key\n      });\n    };\n    _this._updateWidth = function () {\n      var drawerWidth = typeof _this.props.navigationConfig.drawerWidth === 'function' ? _this.props.navigationConfig.drawerWidth() : _this.props.navigationConfig.drawerWidth;\n      if (_this.state.drawerWidth !== drawerWidth) {\n        _this.setState({\n          drawerWidth: drawerWidth\n        });\n      }\n    };\n    _this._renderNavigationView = function (drawerOpenProgress) {\n      return React.createElement(DrawerGestureContext.Provider, {\n        value: _this.drawerGestureRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        }\n      }, React.createElement(DrawerSidebar, _extends({\n        screenProps: _this.props.screenProps,\n        drawerOpenProgress: drawerOpenProgress,\n        navigation: _this.props.navigation,\n        descriptors: _this.props.descriptors,\n        contentComponent: _this.props.navigationConfig.contentComponent,\n        contentOptions: _this.props.navigationConfig.contentOptions,\n        drawerPosition: _this.props.navigationConfig.drawerPosition,\n        style: _this.props.navigationConfig.style\n      }, _this.props.navigationConfig, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        }\n      })));\n    };\n    _this._renderContent = function () {\n      var _this$props = _this.props,\n        lazy = _this$props.lazy,\n        navigation = _this$props.navigation;\n      var loaded = _this.state.loaded;\n      var routes = navigation.state.routes;\n      if (_this.props.navigationConfig.unmountInactiveRoutes) {\n        var activeKey = navigation.state.routes[navigation.state.index].key;\n        var descriptor = _this.props.descriptors[activeKey];\n        return React.createElement(SceneView, {\n          navigation: descriptor.navigation,\n          screenProps: _this.props.screenProps,\n          component: descriptor.getComponent(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          }\n        });\n      } else {\n        return React.createElement(ScreenContainer, {\n          style: styles.pages,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140\n          }\n        }, routes.map(function (route, index) {\n          if (lazy && !loaded.includes(index)) {\n            return null;\n          }\n          var isFocused = navigation.state.index === index;\n          var descriptor = _this.props.descriptors[route.key];\n          return React.createElement(ResourceSavingScene, {\n            key: route.key,\n            style: [StyleSheet.absoluteFill, {\n              opacity: isFocused ? 1 : 0\n            }],\n            isVisible: isFocused,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 150\n            }\n          }, React.createElement(SceneView, {\n            navigation: descriptor.navigation,\n            screenProps: _this.props.screenProps,\n            component: descriptor.getComponent(),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 151\n            }\n          }));\n        }));\n      }\n    };\n    _this._setDrawerGestureRef = function (ref) {\n      _this.drawerGestureRef.current = ref;\n    };\n    return _this;\n  }\n  _createClass(DrawerView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      Dimensions.addEventListener('change', this._updateWidth);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this2 = this;\n      var _this$props$navigatio = this.props.navigation.state,\n        openId = _this$props$navigatio.openId,\n        closeId = _this$props$navigatio.closeId,\n        toggleId = _this$props$navigatio.toggleId,\n        isDrawerOpen = _this$props$navigatio.isDrawerOpen;\n      var _prevProps$navigation = prevProps.navigation.state,\n        prevOpenId = _prevProps$navigation.openId,\n        prevCloseId = _prevProps$navigation.closeId,\n        prevToggleId = _prevProps$navigation.toggleId;\n      var prevIds = [prevOpenId, prevCloseId, prevToggleId];\n      var changedIds = [openId, closeId, toggleId].filter(function (id) {\n        return !prevIds.includes(id);\n      }).sort(function (a, b) {\n        return a > b;\n      });\n      changedIds.forEach(function (id) {\n        if (id === openId) {\n          _this2._drawer.openDrawer();\n        } else if (id === closeId) {\n          _this2._drawer.closeDrawer();\n        } else if (id === toggleId) {\n          if (isDrawerOpen) {\n            _this2._drawer.closeDrawer();\n          } else {\n            _this2._drawer.openDrawer();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      Dimensions.removeEventListener('change', this._updateWidth);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n      var navigation = this.props.navigation;\n      var activeKey = navigation.state.routes[navigation.state.index].key;\n      var drawerLockMode = this.props.descriptors[activeKey].options.drawerLockMode;\n      var _this$props$navigatio2 = this.props.navigationConfig,\n        overlayColor = _this$props$navigatio2.overlayColor,\n        drawerBackgroundColor = _this$props$navigatio2.drawerBackgroundColor;\n      if (drawerBackgroundColor) {\n        drawerBackgroundColor = typeof drawerBackgroundColor === 'string' ? drawerBackgroundColor : drawerBackgroundColor[this.context];\n      } else {\n        drawerBackgroundColor = ThemeColors[this.context].bodyContent;\n      }\n      if (overlayColor) {\n        overlayColor = typeof overlayColor === 'string' ? overlayColor : overlayColor[this.context];\n      } else {\n        overlayColor = ThemeColors[this.context].bodyContent;\n      }\n      return React.createElement(DrawerLayout, {\n        ref: function ref(c) {\n          _this3._drawer = c;\n        },\n        onGestureRef: this._setDrawerGestureRef,\n        drawerLockMode: drawerLockMode || this.props.screenProps && this.props.screenProps.drawerLockMode || this.props.navigationConfig.drawerLockMode,\n        drawerBackgroundColor: drawerBackgroundColor,\n        overlayColor: overlayColor,\n        keyboardDismissMode: this.props.navigationConfig.keyboardDismissMode,\n        drawerWidth: this.state.drawerWidth,\n        onDrawerOpen: this._handleDrawerOpen,\n        onDrawerClose: this._handleDrawerClose,\n        onDrawerStateChanged: this._handleDrawerStateChange,\n        useNativeAnimations: this.props.navigationConfig.useNativeAnimations,\n        renderNavigationView: this._renderNavigationView,\n        drawerPosition: this.props.navigationConfig.drawerPosition === 'right' ? DrawerLayout.positions.Right : DrawerLayout.positions.Left,\n        drawerType: this.props.navigationConfig.drawerType,\n        edgeWidth: this.props.navigationConfig.edgeWidth,\n        hideStatusBar: this.props.navigationConfig.hideStatusBar,\n        statusBarAnimation: this.props.navigationConfig.statusBarAnimation,\n        minSwipeDistance: this.props.navigationConfig.minSwipeDistance,\n        drawerContainerStyle: this.props.navigationConfig.drawerContainerStyle,\n        contentContainerStyle: this.props.navigationConfig.contentContainerStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        }\n      }, React.createElement(DrawerGestureContext.Provider, {\n        value: this.drawerGestureRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        }\n      }, this._renderContent()));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var index = nextProps.navigation.state.index;\n      return {\n        loaded: prevState.loaded.includes(index) ? prevState.loaded : [].concat(_toConsumableArray(prevState.loaded), [index])\n      };\n    }\n  }]);\n  return DrawerView;\n}(React.PureComponent);\nDrawerView.contextType = ThemeContext;\nDrawerView.defaultProps = {\n  lazy: true\n};\nexport { DrawerView as default };\nvar styles = StyleSheet.create({\n  pages: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["React","Dimensions","StyleSheet","ThemeColors","ThemeContext","SceneView","DrawerLayout","ScreenContainer","DrawerActions","DrawerSidebar","DrawerGestureContext","ResourceSavingScene","DrawerView","_React$PureComponent","_inherits","_getPrototypeOf2","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_possibleConstructorReturn","_getPrototypeOf","call","apply","concat","state","loaded","props","navigation","index","drawerWidth","navigationConfig","drawerGestureRef","createRef","_handleDrawerStateChange","newState","willShow","isDrawerIdle","dispatch","type","MARK_DRAWER_IDLE","key","MARK_DRAWER_SETTLING","MARK_DRAWER_ACTIVE","_handleDrawerOpen","DRAWER_OPENED","_handleDrawerClose","DRAWER_CLOSED","_updateWidth","setState","_renderNavigationView","drawerOpenProgress","createElement","Provider","value","__source","fileName","_jsxFileName","lineNumber","_extends","screenProps","descriptors","contentComponent","contentOptions","drawerPosition","style","_renderContent","_this$props","lazy","routes","unmountInactiveRoutes","activeKey","descriptor","component","getComponent","styles","pages","map","route","includes","isFocused","absoluteFill","opacity","isVisible","_setDrawerGestureRef","ref","current","_createClass","componentDidMount","addEventListener","componentDidUpdate","prevProps","_this2","_this$props$navigatio","openId","closeId","toggleId","isDrawerOpen","_prevProps$navigation","prevOpenId","prevCloseId","prevToggleId","prevIds","changedIds","filter","id","sort","a","b","forEach","_drawer","openDrawer","closeDrawer","componentWillUnmount","removeEventListener","render","_this3","drawerLockMode","options","_this$props$navigatio2","overlayColor","drawerBackgroundColor","context","bodyContent","c","onGestureRef","keyboardDismissMode","onDrawerOpen","onDrawerClose","onDrawerStateChanged","useNativeAnimations","renderNavigationView","positions","Right","Left","drawerType","edgeWidth","hideStatusBar","statusBarAnimation","minSwipeDistance","drawerContainerStyle","contentContainerStyle","getDerivedStateFromProps","nextProps","prevState","_toConsumableArray","PureComponent","contextType","defaultProps","default","create","flex"],"sources":["/Users/sammerinio/Documents/flight-tracking-app/node_modules/react-navigation-drawer/dist/views/DrawerView.js"],"sourcesContent":["import React from 'react';\nimport { Dimensions, StyleSheet } from 'react-native';\nimport { ThemeColors, ThemeContext, SceneView } from '@react-navigation/core';\nimport DrawerLayout from 'react-native-gesture-handler/DrawerLayout';\nimport { ScreenContainer } from 'react-native-screens';\n\nimport DrawerActions from '../routers/DrawerActions';\nimport DrawerSidebar from './DrawerSidebar';\nimport DrawerGestureContext from '../utils/DrawerGestureContext';\nimport ResourceSavingScene from '../views/ResourceSavingScene';\n\n/**\n * Component that renders the drawer.\n */\nexport default class DrawerView extends React.PureComponent {\n  static contextType = ThemeContext;\n\n  static defaultProps = {\n    lazy: true\n  };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { index } = nextProps.navigation.state;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(index) ? prevState.loaded : [...prevState.loaded, index]\n    };\n  }\n\n  state = {\n    loaded: [this.props.navigation.state.index],\n    drawerWidth: typeof this.props.navigationConfig.drawerWidth === 'function' ? this.props.navigationConfig.drawerWidth() : this.props.navigationConfig.drawerWidth\n  };\n\n  componentDidMount() {\n    Dimensions.addEventListener('change', this._updateWidth);\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      openId,\n      closeId,\n      toggleId,\n      isDrawerOpen\n    } = this.props.navigation.state;\n    const {\n      openId: prevOpenId,\n      closeId: prevCloseId,\n      toggleId: prevToggleId\n    } = prevProps.navigation.state;\n\n    let prevIds = [prevOpenId, prevCloseId, prevToggleId];\n    let changedIds = [openId, closeId, toggleId].filter(id => !prevIds.includes(id)).sort((a, b) => a > b);\n\n    changedIds.forEach(id => {\n      if (id === openId) {\n        this._drawer.openDrawer();\n      } else if (id === closeId) {\n        this._drawer.closeDrawer();\n      } else if (id === toggleId) {\n        if (isDrawerOpen) {\n          this._drawer.closeDrawer();\n        } else {\n          this._drawer.openDrawer();\n        }\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    Dimensions.removeEventListener('change', this._updateWidth);\n  }\n\n  drawerGestureRef = React.createRef();\n\n  _handleDrawerStateChange = (newState, willShow) => {\n    if (newState === 'Idle') {\n      if (!this.props.navigation.state.isDrawerIdle) {\n        this.props.navigation.dispatch({\n          type: DrawerActions.MARK_DRAWER_IDLE,\n          key: this.props.navigation.state.key\n        });\n      }\n    } else if (newState === 'Settling') {\n      this.props.navigation.dispatch({\n        type: DrawerActions.MARK_DRAWER_SETTLING,\n        key: this.props.navigation.state.key,\n        willShow\n      });\n    } else {\n      if (this.props.navigation.state.isDrawerIdle) {\n        this.props.navigation.dispatch({\n          type: DrawerActions.MARK_DRAWER_ACTIVE,\n          key: this.props.navigation.state.key\n        });\n      }\n    }\n  };\n\n  _handleDrawerOpen = () => {\n    this.props.navigation.dispatch({\n      type: DrawerActions.DRAWER_OPENED,\n      key: this.props.navigation.state.key\n    });\n  };\n\n  _handleDrawerClose = () => {\n    this.props.navigation.dispatch({\n      type: DrawerActions.DRAWER_CLOSED,\n      key: this.props.navigation.state.key\n    });\n  };\n\n  _updateWidth = () => {\n    const drawerWidth = typeof this.props.navigationConfig.drawerWidth === 'function' ? this.props.navigationConfig.drawerWidth() : this.props.navigationConfig.drawerWidth;\n\n    if (this.state.drawerWidth !== drawerWidth) {\n      this.setState({ drawerWidth });\n    }\n  };\n\n  _renderNavigationView = drawerOpenProgress => {\n    return <DrawerGestureContext.Provider value={this.drawerGestureRef}>\n        <DrawerSidebar screenProps={this.props.screenProps} drawerOpenProgress={drawerOpenProgress} navigation={this.props.navigation} descriptors={this.props.descriptors} contentComponent={this.props.navigationConfig.contentComponent} contentOptions={this.props.navigationConfig.contentOptions} drawerPosition={this.props.navigationConfig.drawerPosition} style={this.props.navigationConfig.style} {...this.props.navigationConfig} />\n      </DrawerGestureContext.Provider>;\n  };\n\n  _renderContent = () => {\n    let { lazy, navigation } = this.props;\n    let { loaded } = this.state;\n    let { routes } = navigation.state;\n\n    if (this.props.navigationConfig.unmountInactiveRoutes) {\n      let activeKey = navigation.state.routes[navigation.state.index].key;\n      let descriptor = this.props.descriptors[activeKey];\n\n      return <SceneView navigation={descriptor.navigation} screenProps={this.props.screenProps} component={descriptor.getComponent()} />;\n    } else {\n      return <ScreenContainer style={styles.pages}>\n          {routes.map((route, index) => {\n          if (lazy && !loaded.includes(index)) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          let isFocused = navigation.state.index === index;\n          let descriptor = this.props.descriptors[route.key];\n\n          return <ResourceSavingScene key={route.key} style={[StyleSheet.absoluteFill, { opacity: isFocused ? 1 : 0 }]} isVisible={isFocused}>\n                <SceneView navigation={descriptor.navigation} screenProps={this.props.screenProps} component={descriptor.getComponent()} />\n              </ResourceSavingScene>;\n        })}\n        </ScreenContainer>;\n    }\n  };\n\n  _setDrawerGestureRef = ref => {\n    this.drawerGestureRef.current = ref;\n  };\n\n  render() {\n    const { navigation } = this.props;\n    const activeKey = navigation.state.routes[navigation.state.index].key;\n    const { drawerLockMode } = this.props.descriptors[activeKey].options;\n    let { overlayColor, drawerBackgroundColor } = this.props.navigationConfig;\n\n    if (drawerBackgroundColor) {\n      drawerBackgroundColor = typeof drawerBackgroundColor === 'string' ? drawerBackgroundColor : drawerBackgroundColor[this.context];\n    } else {\n      drawerBackgroundColor = ThemeColors[this.context].bodyContent;\n    }\n\n    if (overlayColor) {\n      overlayColor = typeof overlayColor === 'string' ? overlayColor : overlayColor[this.context];\n    } else {\n      overlayColor = ThemeColors[this.context].bodyContent;\n    }\n\n    return <DrawerLayout ref={c => {\n      this._drawer = c;\n    }} onGestureRef={this._setDrawerGestureRef} drawerLockMode={drawerLockMode || this.props.screenProps && this.props.screenProps.drawerLockMode || this.props.navigationConfig.drawerLockMode} drawerBackgroundColor={drawerBackgroundColor} overlayColor={overlayColor} keyboardDismissMode={this.props.navigationConfig.keyboardDismissMode} drawerWidth={this.state.drawerWidth} onDrawerOpen={this._handleDrawerOpen} onDrawerClose={this._handleDrawerClose} onDrawerStateChanged={this._handleDrawerStateChange} useNativeAnimations={this.props.navigationConfig.useNativeAnimations} renderNavigationView={this._renderNavigationView} drawerPosition={this.props.navigationConfig.drawerPosition === 'right' ? DrawerLayout.positions.Right : DrawerLayout.positions.Left}\n    /* props specific to react-native-gesture-handler/DrawerLayout */\n    drawerType={this.props.navigationConfig.drawerType} edgeWidth={this.props.navigationConfig.edgeWidth} hideStatusBar={this.props.navigationConfig.hideStatusBar} statusBarAnimation={this.props.navigationConfig.statusBarAnimation} minSwipeDistance={this.props.navigationConfig.minSwipeDistance} drawerContainerStyle={this.props.navigationConfig.drawerContainerStyle} contentContainerStyle={this.props.navigationConfig.contentContainerStyle}>\n        <DrawerGestureContext.Provider value={this.drawerGestureRef}>\n          {this._renderContent()}\n        </DrawerGestureContext.Provider>\n      </DrawerLayout>;\n  }\n}\n\nconst styles = StyleSheet.create({\n  pages: {\n    flex: 1\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}