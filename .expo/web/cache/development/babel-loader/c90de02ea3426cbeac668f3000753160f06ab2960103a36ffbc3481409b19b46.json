{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/Users/sammerinio/Documents/flight-tracking-app/node_modules/react-native-maps/lib/components/MapView.js\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport EdgeInsetsPropType from \"react-native-web/dist/exports/EdgeInsetsPropType\";\nimport PointPropType from \"react-native-web/dist/exports/PointPropType\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport RNAnimated from \"react-native-web/dist/exports/Animated\";\nimport { requireNativeComponent } from \"react-native-web/dist/index\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport ColorPropType from \"react-native-web/dist/exports/ColorPropType\";\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport ViewPropTypes from \"react-native-web/dist/exports/ViewPropTypes\";\nimport View from \"react-native-web/dist/exports/View\";\nimport MapMarker from \"./MapMarker\";\nimport MapPolyline from \"./MapPolyline\";\nimport MapPolygon from \"./MapPolygon\";\nimport MapCircle from \"./MapCircle\";\nimport MapCallout from \"./MapCallout\";\nimport MapCalloutSubview from \"./MapCalloutSubview\";\nimport MapOverlay from \"./MapOverlay\";\nimport MapUrlTile from \"./MapUrlTile\";\nimport MapWMSTile from \"./MapWMSTile\";\nimport MapLocalTile from \"./MapLocalTile\";\nimport MapHeatMap from \"./MapHeatmap\";\nimport AnimatedRegion from \"./AnimatedRegion\";\nimport { contextTypes as childContextTypes, getAirMapName, googleMapIsInstalled, createNotSupportedComponent } from \"./decorateMapComponent\";\nimport * as ProviderConstants from \"./ProviderConstants\";\nexport var MAP_TYPES = {\n  STANDARD: 'standard',\n  SATELLITE: 'satellite',\n  HYBRID: 'hybrid',\n  TERRAIN: 'terrain',\n  NONE: 'none',\n  MUTEDSTANDARD: 'mutedStandard'\n};\nvar GOOGLE_MAPS_ONLY_TYPES = [MAP_TYPES.TERRAIN, MAP_TYPES.NONE];\nvar viewConfig = {\n  uiViewClassName: 'AIR<provider>Map',\n  validAttributes: {\n    region: true\n  }\n};\nvar CameraShape = PropTypes.shape({\n  center: PropTypes.shape({\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired\n  }),\n  pitch: PropTypes.number.isRequired,\n  heading: PropTypes.number.isRequired,\n  altitude: PropTypes.number.isRequired,\n  zoom: PropTypes.number.isRequired\n});\nvar viewPropTypes = ViewPropTypes || View.propTypes;\nvar propTypes = _objectSpread({}, viewPropTypes, {\n  provider: PropTypes.oneOf(['google']),\n  style: viewPropTypes.style,\n  customMapStyle: PropTypes.array,\n  customMapStyleString: PropTypes.string,\n  showsUserLocation: PropTypes.bool,\n  userLocationAnnotationTitle: PropTypes.string,\n  showsMyLocationButton: PropTypes.bool,\n  followsUserLocation: PropTypes.bool,\n  showsPointsOfInterest: PropTypes.bool,\n  showsCompass: PropTypes.bool,\n  zoomEnabled: PropTypes.bool,\n  zoomTapEnabled: PropTypes.bool,\n  zoomControlEnabled: PropTypes.bool,\n  rotateEnabled: PropTypes.bool,\n  cacheEnabled: PropTypes.bool,\n  loadingEnabled: PropTypes.bool,\n  loadingBackgroundColor: ColorPropType,\n  loadingIndicatorColor: ColorPropType,\n  scrollEnabled: PropTypes.bool,\n  pitchEnabled: PropTypes.bool,\n  toolbarEnabled: PropTypes.bool,\n  moveOnMarkerPress: PropTypes.bool,\n  showsScale: PropTypes.bool,\n  showsBuildings: PropTypes.bool,\n  showsTraffic: PropTypes.bool,\n  showsIndoors: PropTypes.bool,\n  showsIndoorLevelPicker: PropTypes.bool,\n  mapType: PropTypes.oneOf(Object.values(MAP_TYPES)),\n  region: PropTypes.shape({\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired,\n    latitudeDelta: PropTypes.number.isRequired,\n    longitudeDelta: PropTypes.number.isRequired\n  }),\n  initialRegion: PropTypes.shape({\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired,\n    latitudeDelta: PropTypes.number.isRequired,\n    longitudeDelta: PropTypes.number.isRequired\n  }),\n  camera: CameraShape,\n  initialCamera: CameraShape,\n  liteMode: PropTypes.bool,\n  mapPadding: EdgeInsetsPropType,\n  paddingAdjustmentBehavior: PropTypes.oneOf(['always', 'automatic', 'never']),\n  maxDelta: PropTypes.number,\n  minDelta: PropTypes.number,\n  legalLabelInsets: EdgeInsetsPropType,\n  onMapReady: PropTypes.func,\n  onMapLoaded: PropTypes.func,\n  onKmlReady: PropTypes.func,\n  onRegionChange: PropTypes.func,\n  onRegionChangeComplete: PropTypes.func,\n  onPress: PropTypes.func,\n  onDoublePress: PropTypes.func,\n  onLongPress: PropTypes.func,\n  onUserLocationChange: PropTypes.func,\n  onPanDrag: PropTypes.func,\n  onPoiClick: PropTypes.func,\n  onMarkerPress: PropTypes.func,\n  onMarkerSelect: PropTypes.func,\n  onMarkerDeselect: PropTypes.func,\n  onCalloutPress: PropTypes.func,\n  onMarkerDragStart: PropTypes.func,\n  onMarkerDrag: PropTypes.func,\n  onMarkerDragEnd: PropTypes.func,\n  minZoomLevel: PropTypes.number,\n  maxZoomLevel: PropTypes.number,\n  kmlSrc: PropTypes.string,\n  compassOffset: PointPropType,\n  onIndoorLevelActivated: PropTypes.func,\n  onIndoorBuildingFocused: PropTypes.func\n});\nvar MapView = function (_React$Component) {\n  _inherits(MapView, _React$Component);\n  function MapView(props) {\n    var _this;\n    _classCallCheck(this, MapView);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MapView).call(this, props));\n    _this.state = {\n      isReady: Platform.OS === 'ios'\n    };\n    _this._onMapReady = _this._onMapReady.bind(_assertThisInitialized(_this));\n    _this._onMarkerPress = _this._onMarkerPress.bind(_assertThisInitialized(_this));\n    _this._onChange = _this._onChange.bind(_assertThisInitialized(_this));\n    _this._onLayout = _this._onLayout.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n  _createClass(MapView, [{\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      return {\n        provider: this.props.provider\n      };\n    }\n  }, {\n    key: \"getSnapshotBeforeUpdate\",\n    value: function getSnapshotBeforeUpdate(prevProps) {\n      if (this.state.isReady && this.props.customMapStyle !== prevProps.customMapStyle) {\n        this._updateStyle(this.props);\n      }\n      return this.props.region || null;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, region) {\n      var a = this.__lastRegion;\n      var b = region;\n      if (!a || !b) {\n        return;\n      }\n      if (a.latitude !== b.latitude || a.longitude !== b.longitude || a.latitudeDelta !== b.latitudeDelta || a.longitudeDelta !== b.longitudeDelta) {\n        this.map.setNativeProps({\n          region: b\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var isReady = this.state.isReady;\n      if (isReady) {\n        this._updateStyle(this.props);\n      }\n    }\n  }, {\n    key: \"_updateStyle\",\n    value: function _updateStyle(props) {\n      var customMapStyle = props.customMapStyle;\n      this.map.setNativeProps({\n        customMapStyleString: JSON.stringify(customMapStyle)\n      });\n    }\n  }, {\n    key: \"_onMapReady\",\n    value: function _onMapReady() {\n      var _this$props = this.props,\n        region = _this$props.region,\n        initialRegion = _this$props.initialRegion,\n        onMapReady = _this$props.onMapReady;\n      if (region) {\n        this.map.setNativeProps({\n          region: region\n        });\n      } else if (initialRegion) {\n        this.map.setNativeProps({\n          initialRegion: initialRegion\n        });\n      }\n      this._updateStyle(this.props);\n      this.setState({\n        isReady: true\n      }, function () {\n        if (onMapReady) {\n          onMapReady();\n        }\n      });\n    }\n  }, {\n    key: \"_onLayout\",\n    value: function _onLayout(e) {\n      var layout = e.nativeEvent.layout;\n      if (!layout.width || !layout.height) {\n        return;\n      }\n      if (this.state.isReady && !this.__layoutCalled) {\n        var _this$props2 = this.props,\n          region = _this$props2.region,\n          initialRegion = _this$props2.initialRegion;\n        if (region) {\n          this.__layoutCalled = true;\n          this.map.setNativeProps({\n            region: region\n          });\n        } else if (initialRegion) {\n          this.__layoutCalled = true;\n          this.map.setNativeProps({\n            initialRegion: initialRegion\n          });\n        }\n      }\n      if (this.props.onLayout) {\n        this.props.onLayout(e);\n      }\n    }\n  }, {\n    key: \"_onMarkerPress\",\n    value: function _onMarkerPress(event) {\n      if (this.props.onMarkerPress) {\n        this.props.onMarkerPress(event.nativeEvent);\n      }\n    }\n  }, {\n    key: \"_onChange\",\n    value: function _onChange(event) {\n      this.__lastRegion = event.nativeEvent.region;\n      if (event.nativeEvent.continuous) {\n        if (this.props.onRegionChange) {\n          this.props.onRegionChange(event.nativeEvent.region);\n        }\n      } else if (this.props.onRegionChangeComplete) {\n        this.props.onRegionChangeComplete(event.nativeEvent.region);\n      }\n    }\n  }, {\n    key: \"getCamera\",\n    value: function getCamera() {\n      if (Platform.OS === 'android') {\n        return NativeModules.AirMapModule.getCamera(this._getHandle());\n      } else if (Platform.OS === 'ios') {\n        return this._runCommand('getCamera', []);\n      }\n      return Promise.reject('getCamera not supported on this platform');\n    }\n  }, {\n    key: \"setCamera\",\n    value: function setCamera(camera) {\n      this._runCommand('setCamera', [camera]);\n    }\n  }, {\n    key: \"animateCamera\",\n    value: function animateCamera(camera, opts) {\n      this._runCommand('animateCamera', [camera, opts && opts.duration || 500]);\n    }\n  }, {\n    key: \"animateToNavigation\",\n    value: function animateToNavigation(location, bearing, angle, duration) {\n      console.warn('animateToNavigation() is deprecated, use animateCamera() instead');\n      this._runCommand('animateToNavigation', [location, bearing, angle, duration || 500]);\n    }\n  }, {\n    key: \"animateToRegion\",\n    value: function animateToRegion(region, duration) {\n      this._runCommand('animateToRegion', [region, duration || 500]);\n    }\n  }, {\n    key: \"animateToCoordinate\",\n    value: function animateToCoordinate(latLng, duration) {\n      console.warn('animateToCoordinate() is deprecated, use animateCamera() instead');\n      this._runCommand('animateToCoordinate', [latLng, duration || 500]);\n    }\n  }, {\n    key: \"animateToBearing\",\n    value: function animateToBearing(bearing, duration) {\n      console.warn('animateToBearing() is deprecated, use animateCamera() instead');\n      this._runCommand('animateToBearing', [bearing, duration || 500]);\n    }\n  }, {\n    key: \"animateToViewingAngle\",\n    value: function animateToViewingAngle(angle, duration) {\n      console.warn('animateToViewingAngle() is deprecated, use animateCamera() instead');\n      this._runCommand('animateToViewingAngle', [angle, duration || 500]);\n    }\n  }, {\n    key: \"fitToElements\",\n    value: function fitToElements(animated) {\n      this._runCommand('fitToElements', [animated]);\n    }\n  }, {\n    key: \"fitToSuppliedMarkers\",\n    value: function fitToSuppliedMarkers(markers) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _options$edgePadding = options.edgePadding,\n        edgePadding = _options$edgePadding === void 0 ? {\n          top: 0,\n          right: 0,\n          bottom: 0,\n          left: 0\n        } : _options$edgePadding,\n        _options$animated = options.animated,\n        animated = _options$animated === void 0 ? true : _options$animated;\n      this._runCommand('fitToSuppliedMarkers', [markers, edgePadding, animated]);\n    }\n  }, {\n    key: \"fitToCoordinates\",\n    value: function fitToCoordinates() {\n      var coordinates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _options$edgePadding2 = options.edgePadding,\n        edgePadding = _options$edgePadding2 === void 0 ? {\n          top: 0,\n          right: 0,\n          bottom: 0,\n          left: 0\n        } : _options$edgePadding2,\n        _options$animated2 = options.animated,\n        animated = _options$animated2 === void 0 ? true : _options$animated2;\n      this._runCommand('fitToCoordinates', [coordinates, edgePadding, animated]);\n    }\n  }, {\n    key: \"getMapBoundaries\",\n    value: function getMapBoundaries() {\n      return _regeneratorRuntime.async(function getMapBoundaries$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(Platform.OS === 'android')) {\n                _context.next = 6;\n                break;\n              }\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(NativeModules.AirMapModule.getMapBoundaries(this._getHandle()));\n            case 3:\n              return _context.abrupt(\"return\", _context.sent);\n            case 6:\n              if (!(Platform.OS === 'ios')) {\n                _context.next = 10;\n                break;\n              }\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(this._runCommand('getMapBoundaries', []));\n            case 9:\n              return _context.abrupt(\"return\", _context.sent);\n            case 10:\n              return _context.abrupt(\"return\", Promise.reject('getMapBoundaries not supported on this platform'));\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"setMapBoundaries\",\n    value: function setMapBoundaries(northEast, southWest) {\n      this._runCommand('setMapBoundaries', [northEast, southWest]);\n    }\n  }, {\n    key: \"setIndoorActiveLevelIndex\",\n    value: function setIndoorActiveLevelIndex(activeLevelIndex) {\n      this._runCommand('setIndoorActiveLevelIndex', [activeLevelIndex]);\n    }\n  }, {\n    key: \"takeSnapshot\",\n    value: function takeSnapshot(args) {\n      var _this2 = this;\n      if (Platform.OS === 'ios' && arguments.length === 4) {\n        console.warn('Old takeSnapshot API has been deprecated; will be removed in the near future');\n        var width = arguments[0];\n        var height = arguments[1];\n        var region = arguments[2];\n        var callback = arguments[3];\n        this._runCommand('takeSnapshot', [width || 0, height || 0, region || {}, 'png', 1, 'legacy', callback]);\n        return undefined;\n      }\n      var config = {\n        width: args.width || 0,\n        height: args.height || 0,\n        region: args.region || {},\n        format: args.format || 'png',\n        quality: args.quality || 1.0,\n        result: args.result || 'file'\n      };\n      if (config.format !== 'png' && config.format !== 'jpg') {\n        throw new Error('Invalid format specified');\n      }\n      if (config.result !== 'file' && config.result !== 'base64') {\n        throw new Error('Invalid result specified');\n      }\n      if (Platform.OS === 'android') {\n        return NativeModules.AirMapModule.takeSnapshot(this._getHandle(), config);\n      } else if (Platform.OS === 'ios') {\n        return new Promise(function (resolve, reject) {\n          _this2._runCommand('takeSnapshot', [config.width, config.height, config.region, config.format, config.quality, config.result, function (err, snapshot) {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(snapshot);\n            }\n          }]);\n        });\n      }\n      return Promise.reject('takeSnapshot not supported on this platform');\n    }\n  }, {\n    key: \"pointForCoordinate\",\n    value: function pointForCoordinate(coordinate) {\n      if (Platform.OS === 'android') {\n        return NativeModules.AirMapModule.pointForCoordinate(this._getHandle(), coordinate);\n      } else if (Platform.OS === 'ios') {\n        return this._runCommand('pointForCoordinate', [coordinate]);\n      }\n      return Promise.reject('pointForCoordinate not supported on this platform');\n    }\n  }, {\n    key: \"coordinateForPoint\",\n    value: function coordinateForPoint(point) {\n      if (Platform.OS === 'android') {\n        return NativeModules.AirMapModule.coordinateForPoint(this._getHandle(), point);\n      } else if (Platform.OS === 'ios') {\n        return this._runCommand('coordinateForPoint', [point]);\n      }\n      return Promise.reject('coordinateForPoint not supported on this platform');\n    }\n  }, {\n    key: \"getMarkersFrames\",\n    value: function getMarkersFrames() {\n      var onlyVisible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (Platform.OS === 'ios') {\n        return this._runCommand('getMarkersFrames', [onlyVisible]);\n      }\n      return Promise.reject('getMarkersFrames not supported on this platform');\n    }\n  }, {\n    key: \"boundingBoxForRegion\",\n    value: function boundingBoxForRegion(region) {\n      return {\n        northEast: {\n          latitude: region.latitude + region.latitudeDelta / 2,\n          longitude: region.longitude + region.longitudeDelta / 2\n        },\n        southWest: {\n          latitude: region.latitude - region.latitudeDelta / 2,\n          longitude: region.longitude - region.longitudeDelta / 2\n        }\n      };\n    }\n  }, {\n    key: \"_uiManagerCommand\",\n    value: function _uiManagerCommand(name) {\n      var UIManager = NativeModules.UIManager;\n      var componentName = getAirMapName(this.props.provider);\n      if (!UIManager.getViewManagerConfig) {\n        return UIManager[componentName].Commands[name];\n      }\n      return UIManager.getViewManagerConfig(componentName).Commands[name];\n    }\n  }, {\n    key: \"_mapManagerCommand\",\n    value: function _mapManagerCommand(name) {\n      var managerName = getAirMapName(this.props.provider);\n      if (managerName === 'UI') {\n        var UIManager = NativeModules.UIManager;\n        if (!UIManager.getViewManagerConfig) {\n          return UIManager[name];\n        }\n        return UIManager.getViewManagerConfig(name);\n      }\n      return NativeModules[getAirMapName(this.props.provider) + \"Manager\"][name];\n    }\n  }, {\n    key: \"_getHandle\",\n    value: function _getHandle() {\n      return findNodeHandle(this.map);\n    }\n  }, {\n    key: \"_runCommand\",\n    value: function _runCommand(name, args) {\n      switch (Platform.OS) {\n        case 'android':\n          return NativeModules.UIManager.dispatchViewManagerCommand(this._getHandle(), this._uiManagerCommand(name), args);\n        case 'ios':\n          return this._mapManagerCommand(name).apply(void 0, [this._getHandle()].concat(_toConsumableArray(args)));\n        default:\n          return Promise.reject(\"Invalid platform was passed: \" + Platform.OS);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n      var props;\n      if (this.state.isReady) {\n        props = _objectSpread({\n          region: null,\n          initialRegion: null,\n          onMarkerPress: this._onMarkerPress,\n          onChange: this._onChange,\n          onMapReady: this._onMapReady,\n          onLayout: this._onLayout\n        }, this.props);\n        if (Platform.OS === 'ios' && props.provider === ProviderConstants.PROVIDER_DEFAULT && GOOGLE_MAPS_ONLY_TYPES.includes(props.mapType)) {\n          props.mapType = MAP_TYPES.standard;\n        }\n        props.handlePanDrag = !!props.onPanDrag;\n      } else {\n        props = {\n          style: this.props.style,\n          region: null,\n          initialRegion: null,\n          onMarkerPress: this._onMarkerPress,\n          onChange: this._onChange,\n          onMapReady: this._onMapReady,\n          onLayout: this._onLayout\n        };\n      }\n      if (Platform.OS === 'android' && this.props.liteMode) {\n        return React.createElement(AIRMapLite, _extends({\n          ref: function ref(_ref) {\n            _this3.map = _ref;\n          }\n        }, props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 981\n          }\n        }));\n      }\n      var AIRMap = getAirMapComponent(this.props.provider);\n      return React.createElement(AIRMap, _extends({\n        ref: function ref(_ref2) {\n          _this3.map = _ref2;\n        }\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 993\n        }\n      }));\n    }\n  }]);\n  return MapView;\n}(React.Component);\nMapView.propTypes = propTypes;\nMapView.viewConfig = viewConfig;\nMapView.childContextTypes = childContextTypes;\nMapView.MAP_TYPES = MAP_TYPES;\nvar nativeComponent = function nativeComponent(Component) {\n  return requireNativeComponent(Component, MapView, {\n    nativeOnly: {\n      onChange: true,\n      onMapReady: true,\n      onKmlReady: true,\n      handlePanDrag: true\n    }\n  });\n};\nvar airMaps = {\n  default: nativeComponent('AIRMap')\n};\nif (Platform.OS === 'android') {\n  airMaps.google = airMaps.default;\n} else {\n  airMaps.google = googleMapIsInstalled ? nativeComponent('AIRGoogleMap') : createNotSupportedComponent('react-native-maps: AirGoogleMaps dir must be added to your xCode project to support GoogleMaps on iOS.');\n}\nvar getAirMapComponent = function getAirMapComponent(provider) {\n  return airMaps[provider || 'default'];\n};\nvar AIRMapLite;\nif (!NativeModules.UIManager.getViewManagerConfig) {\n  AIRMapLite = NativeModules.UIManager.AIRMapLite && requireNativeComponent('AIRMapLite', MapView, {\n    nativeOnly: {\n      onChange: true,\n      onMapReady: true,\n      handlePanDrag: true\n    }\n  });\n} else {\n  AIRMapLite = NativeModules.UIManager.getViewManagerConfig('AIRMapLite') && requireNativeComponent('AIRMapLite', MapView, {\n    nativeOnly: {\n      onChange: true,\n      onMapReady: true,\n      handlePanDrag: true\n    }\n  });\n}\nexport var Animated = RNAnimated.createAnimatedComponent(MapView);\nexport var ProviderPropType = PropTypes.oneOf(Object.values(ProviderConstants));\nMapView.Marker = MapMarker;\nMapView.Polyline = MapPolyline;\nMapView.Polygon = MapPolygon;\nMapView.Circle = MapCircle;\nMapView.UrlTile = MapUrlTile;\nMapView.MapWMSTile = MapWMSTile;\nMapView.LocalTile = MapLocalTile;\nMapView.Heatmap = MapHeatMap;\nMapView.Overlay = MapOverlay;\nMapView.Callout = MapCallout;\nMapView.CalloutSubview = MapCalloutSubview;\n_extends(MapView, ProviderConstants);\nMapView.ProviderPropType = ProviderPropType;\nMapView.Animated = Animated;\nMapView.AnimatedRegion = AnimatedRegion;\nexport default MapView;","map":{"version":3,"names":["PropTypes","React","EdgeInsetsPropType","PointPropType","Platform","RNAnimated","requireNativeComponent","NativeModules","ColorPropType","findNodeHandle","ViewPropTypes","View","MapMarker","MapPolyline","MapPolygon","MapCircle","MapCallout","MapCalloutSubview","MapOverlay","MapUrlTile","MapWMSTile","MapLocalTile","MapHeatMap","AnimatedRegion","contextTypes","childContextTypes","getAirMapName","googleMapIsInstalled","createNotSupportedComponent","ProviderConstants","MAP_TYPES","STANDARD","SATELLITE","HYBRID","TERRAIN","NONE","MUTEDSTANDARD","GOOGLE_MAPS_ONLY_TYPES","viewConfig","uiViewClassName","validAttributes","region","CameraShape","shape","center","latitude","number","isRequired","longitude","pitch","heading","altitude","zoom","viewPropTypes","propTypes","_objectSpread","provider","oneOf","style","customMapStyle","array","customMapStyleString","string","showsUserLocation","bool","userLocationAnnotationTitle","showsMyLocationButton","followsUserLocation","showsPointsOfInterest","showsCompass","zoomEnabled","zoomTapEnabled","zoomControlEnabled","rotateEnabled","cacheEnabled","loadingEnabled","loadingBackgroundColor","loadingIndicatorColor","scrollEnabled","pitchEnabled","toolbarEnabled","moveOnMarkerPress","showsScale","showsBuildings","showsTraffic","showsIndoors","showsIndoorLevelPicker","mapType","Object","values","latitudeDelta","longitudeDelta","initialRegion","camera","initialCamera","liteMode","mapPadding","paddingAdjustmentBehavior","maxDelta","minDelta","legalLabelInsets","onMapReady","func","onMapLoaded","onKmlReady","onRegionChange","onRegionChangeComplete","onPress","onDoublePress","onLongPress","onUserLocationChange","onPanDrag","onPoiClick","onMarkerPress","onMarkerSelect","onMarkerDeselect","onCalloutPress","onMarkerDragStart","onMarkerDrag","onMarkerDragEnd","minZoomLevel","maxZoomLevel","kmlSrc","compassOffset","onIndoorLevelActivated","onIndoorBuildingFocused","MapView","_React$Component","_inherits","props","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","call","state","isReady","OS","_onMapReady","bind","_assertThisInitialized","_onMarkerPress","_onChange","_onLayout","_createClass","key","value","getChildContext","getSnapshotBeforeUpdate","prevProps","_updateStyle","componentDidUpdate","prevState","a","__lastRegion","b","map","setNativeProps","componentDidMount","JSON","stringify","_this$props","setState","e","layout","nativeEvent","width","height","__layoutCalled","_this$props2","onLayout","event","continuous","getCamera","AirMapModule","_getHandle","_runCommand","Promise","reject","setCamera","animateCamera","opts","duration","animateToNavigation","location","bearing","angle","console","warn","animateToRegion","animateToCoordinate","latLng","animateToBearing","animateToViewingAngle","fitToElements","animated","fitToSuppliedMarkers","markers","options","arguments","length","undefined","_options$edgePadding","edgePadding","top","right","bottom","left","_options$animated","fitToCoordinates","coordinates","_options$edgePadding2","_options$animated2","getMapBoundaries","_regeneratorRuntime","async","getMapBoundaries$","_context","prev","next","awrap","abrupt","sent","stop","setMapBoundaries","northEast","southWest","setIndoorActiveLevelIndex","activeLevelIndex","takeSnapshot","args","_this2","callback","config","format","quality","result","Error","resolve","err","snapshot","pointForCoordinate","coordinate","coordinateForPoint","point","getMarkersFrames","onlyVisible","boundingBoxForRegion","_uiManagerCommand","name","UIManager","componentName","getViewManagerConfig","Commands","_mapManagerCommand","managerName","dispatchViewManagerCommand","apply","concat","_toConsumableArray","render","_this3","onChange","PROVIDER_DEFAULT","includes","standard","handlePanDrag","createElement","AIRMapLite","_extends","ref","__source","fileName","_jsxFileName","lineNumber","AIRMap","getAirMapComponent","Component","nativeComponent","nativeOnly","airMaps","default","google","Animated","createAnimatedComponent","ProviderPropType","Marker","Polyline","Polygon","Circle","UrlTile","LocalTile","Heatmap","Overlay","Callout","CalloutSubview"],"sources":["/Users/sammerinio/Documents/flight-tracking-app/node_modules/react-native-maps/lib/components/MapView.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n  EdgeInsetsPropType,\n  PointPropType,\n  Platform,\n  Animated as RNAnimated,\n  requireNativeComponent,\n  NativeModules,\n  ColorPropType,\n  findNodeHandle,\n  ViewPropTypes,\n  View,\n} from 'react-native';\nimport MapMarker from './MapMarker';\nimport MapPolyline from './MapPolyline';\nimport MapPolygon from './MapPolygon';\nimport MapCircle from './MapCircle';\nimport MapCallout from './MapCallout';\nimport MapCalloutSubview from './MapCalloutSubview';\nimport MapOverlay from './MapOverlay';\nimport MapUrlTile from './MapUrlTile';\nimport MapWMSTile from './MapWMSTile';\nimport MapLocalTile from './MapLocalTile';\nimport MapHeatMap from './MapHeatmap';\nimport AnimatedRegion from './AnimatedRegion';\nimport {\n  contextTypes as childContextTypes,\n  getAirMapName,\n  googleMapIsInstalled,\n  createNotSupportedComponent,\n} from './decorateMapComponent';\nimport * as ProviderConstants from './ProviderConstants';\n\nexport const MAP_TYPES = {\n  STANDARD: 'standard',\n  SATELLITE: 'satellite',\n  HYBRID: 'hybrid',\n  TERRAIN: 'terrain',\n  NONE: 'none',\n  MUTEDSTANDARD: 'mutedStandard',\n};\n\nconst GOOGLE_MAPS_ONLY_TYPES = [MAP_TYPES.TERRAIN, MAP_TYPES.NONE];\n\nconst viewConfig = {\n  uiViewClassName: 'AIR<provider>Map',\n  validAttributes: {\n    region: true,\n  },\n};\n\n/**\n * Defines the map camera.\n */\nconst CameraShape = PropTypes.shape({\n  center: PropTypes.shape({\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired,\n  }),\n  pitch: PropTypes.number.isRequired,\n  heading: PropTypes.number.isRequired,\n  altitude: PropTypes.number.isRequired,\n  zoom: PropTypes.number.isRequired,\n});\n\n// if ViewPropTypes is not defined fall back to View.propType (to support RN < 0.44)\nconst viewPropTypes = ViewPropTypes || View.propTypes;\n\nconst propTypes = {\n  ...viewPropTypes,\n  /**\n   * When provider is \"google\", we will use GoogleMaps.\n   * Any value other than \"google\" will default to using\n   * MapKit in iOS or GoogleMaps in android as the map provider.\n   */\n  provider: PropTypes.oneOf(['google']),\n\n  /**\n   * Used to style and layout the `MapView`.  See `StyleSheet.js` and\n   * `ViewStylePropTypes.js` for more info.\n   */\n  style: viewPropTypes.style,\n\n  /**\n   * A json object that describes the style of the map. This is transformed to a string\n   * and saved in mayStyleString to be sent to android and ios\n   * https://developers.google.com/maps/documentation/ios-sdk/styling#use_a_string_resource\n   * https://developers.google.com/maps/documentation/android-api/styling\n   */\n  customMapStyle: PropTypes.array,\n\n  /**\n   * A json string that describes the style of the map\n   * https://developers.google.com/maps/documentation/ios-sdk/styling#use_a_string_resource\n   * https://developers.google.com/maps/documentation/android-api/styling\n   */\n  customMapStyleString: PropTypes.string,\n\n  /**\n   * If `true` the app will ask for the user's location.\n   * Default value is `false`.\n   *\n   * **NOTE**: You need to add NSLocationWhenInUseUsageDescription key in\n   * Info.plist to enable geolocation, otherwise it is going\n   * to *fail silently*! You will also need to add an explanation for why\n   * you need the users location against `NSLocationWhenInUseUsageDescription` in Info.plist.\n   * Otherwise Apple may reject your app submission.\n   */\n  showsUserLocation: PropTypes.bool,\n\n  /**\n   * The title of the annotation for current user location. This only works if\n   * `showsUserLocation` is true.\n   * There is a default value `My Location` set by MapView.\n   *\n   * @platform ios\n   */\n  userLocationAnnotationTitle: PropTypes.string,\n\n  /**\n   * If `false` hide the button to move map to the current user's location.\n   * Default value is `true`.\n   *\n   * @platform android\n   */\n  showsMyLocationButton: PropTypes.bool,\n\n  /**\n   * If `true` the map will focus on the user's location. This only works if\n   * `showsUserLocation` is true and the user has shared their location.\n   * Default value is `false`.\n   *\n   * @platform ios\n   */\n  followsUserLocation: PropTypes.bool,\n\n  /**\n   * If `false` points of interest won't be displayed on the map.\n   * Default value is `true`.\n   *\n   */\n  showsPointsOfInterest: PropTypes.bool,\n\n  /**\n   * If `false` compass won't be displayed on the map.\n   * Default value is `true`.\n   *\n   * @platform ios\n   */\n  showsCompass: PropTypes.bool,\n\n  /**\n   * If `false` the user won't be able to pinch/zoom the map.\n   * Default value is `true`.\n   *\n   */\n  zoomEnabled: PropTypes.bool,\n\n  /**\n   * If `false` the user won't be able to double tap to zoom the map.\n   * However it will greatly decrease delay of tap gesture recognition.\n   * Default value is `true`.\n   *\n   */\n  zoomTapEnabled: PropTypes.bool,\n\n  /**\n   *If `false` the user won't be able to zoom the map\n   * Default value is `true`.\n   *\n   *@platform android\n   */\n  zoomControlEnabled: PropTypes.bool,\n\n  /**\n   * If `false` the user won't be able to pinch/rotate the map.\n   * Default value is `true`.\n   *\n   */\n  rotateEnabled: PropTypes.bool,\n\n  /**\n   * If `true` the map will be cached to an Image for performance\n   * Default value is `false`.\n   *\n   */\n  cacheEnabled: PropTypes.bool,\n\n  /**\n   * If `true` the map will be showing a loading indicator\n   * Default value is `false`.\n   *\n   */\n  loadingEnabled: PropTypes.bool,\n\n  /**\n   * Loading background color while generating map cache image or loading the map\n   * Default color is light gray.\n   *\n   */\n  loadingBackgroundColor: ColorPropType,\n\n  /**\n   * Loading indicator color while generating map cache image or loading the map\n   * Default color is gray color for iOS, theme color for Android.\n   *\n   */\n  loadingIndicatorColor: ColorPropType,\n\n  /**\n   * If `false` the user won't be able to change the map region being displayed.\n   * Default value is `true`.\n   *\n   */\n  scrollEnabled: PropTypes.bool,\n\n  /**\n   * If `false` the user won't be able to adjust the camera’s pitch angle.\n   * Default value is `true`.\n   *\n   */\n  pitchEnabled: PropTypes.bool,\n\n  /**\n   * If `false` will hide 'Navigate' and 'Open in Maps' buttons on marker press\n   * Default value is `true`.\n   *\n   * @platform android\n   */\n  toolbarEnabled: PropTypes.bool,\n\n  /**\n   * A Boolean indicating whether on marker press the map will move to the pressed marker\n   * Default value is `true`\n   *\n   * @platform android\n   */\n  moveOnMarkerPress: PropTypes.bool,\n\n  /**\n   * A Boolean indicating whether the map shows scale information.\n   * Default value is `false`\n   *\n   * @platform ios\n   */\n  showsScale: PropTypes.bool,\n\n  /**\n   * A Boolean indicating whether the map displays extruded building information.\n   * Default value is `true`.\n   */\n  showsBuildings: PropTypes.bool,\n\n  /**\n   * A Boolean value indicating whether the map displays traffic information.\n   * Default value is `false`.\n   */\n  showsTraffic: PropTypes.bool,\n\n  /**\n   * A Boolean indicating whether indoor maps should be enabled.\n   * Default value is `false`\n   *\n   * @platform android\n   */\n  showsIndoors: PropTypes.bool,\n\n  /**\n   * A Boolean indicating whether indoor level picker should be enabled.\n   * Default value is `false`\n   *\n   * @platform android\n   */\n  showsIndoorLevelPicker: PropTypes.bool,\n\n  /**\n   * The map type to be displayed.\n   *\n   * - standard: standard road map (default)\n   * - satellite: satellite view\n   * - hybrid: satellite view with roads and points of interest overlayed\n   * - terrain: topographic view\n   * - none: no base map\n   */\n  mapType: PropTypes.oneOf(Object.values(MAP_TYPES)),\n\n  /**\n   * The region to be displayed by the map.\n   *\n   * The region is defined by the center coordinates and the span of\n   * coordinates to display.\n   */\n  region: PropTypes.shape({\n    /**\n     * Coordinates for the center of the map.\n     */\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired,\n\n    /**\n     * Difference between the minimun and the maximum latitude/longitude\n     * to be displayed.\n     */\n    latitudeDelta: PropTypes.number.isRequired,\n    longitudeDelta: PropTypes.number.isRequired,\n  }),\n\n  /**\n   * The initial region to be displayed by the map.  Use this prop instead of `region`\n   * only if you don't want to control the viewport of the map besides the initial region.\n   *\n   * Changing this prop after the component has mounted will not result in a region change.\n   *\n   * This is similar to the `initialValue` prop of a text input.\n   */\n  initialRegion: PropTypes.shape({\n    /**\n     * Coordinates for the center of the map.\n     */\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired,\n\n    /**\n     * Difference between the minimun and the maximum latitude/longitude\n     * to be displayed.\n     */\n    latitudeDelta: PropTypes.number.isRequired,\n    longitudeDelta: PropTypes.number.isRequired,\n  }),\n\n  /**\n   * The camera view the map should use.\n   *\n   * Use the camera system, instead of the region system, if you need control over\n   * the pitch or heading.\n   */\n  camera: CameraShape,\n\n  /**\n   * The initial camera view the map should use.  Use this prop instead of `camera`\n   * only if you don't want to control the camera of the map besides the initial view.\n   *\n   * Use the camera system, instead of the region system, if you need control over\n   * the pitch or heading.\n   *\n   * Changing this prop after the component has mounted will not result in a camera change.\n   *\n   * This is similar to the `initialValue` prop of a text input.\n   */\n  initialCamera: CameraShape,\n\n  /**\n   * A Boolean indicating whether to use liteMode for android\n   * Default value is `false`\n   *\n   * @platform android\n   */\n  liteMode: PropTypes.bool,\n\n  /**\n   * (Google Maps only)\n   *\n   * Padding that is used by the Google Map View to position\n   * the camera, legal labels and buttons\n   *\n   */\n  mapPadding: EdgeInsetsPropType,\n\n  /**\n   * (Google Maps only, iOS)\n   *\n   * Whether the safe area padding is added to the Google Map View padding.\n   * This affects where markers, compass, Google logo etc. are placed on the view.\n   *\n   */\n  paddingAdjustmentBehavior: PropTypes.oneOf(['always', 'automatic', 'never']),\n\n  /**\n   * Maximum size of area that can be displayed.\n   *\n   * @platform ios\n   */\n  maxDelta: PropTypes.number,\n\n  /**\n   * Minimum size of area that can be displayed.\n   *\n   * @platform ios\n   */\n  minDelta: PropTypes.number,\n\n  /**\n   * Insets for the map's legal label, originally at bottom left of the map.\n   * See `EdgeInsetsPropType.js` for more information.\n   */\n  legalLabelInsets: EdgeInsetsPropType,\n\n  /**\n   * Callback that is called once the map is fully loaded.\n   */\n  onMapReady: PropTypes.func,\n\n  /**\n   * Callback that is called once all tiles have been loaded\n   * (or failed permanently) and labels have been rendered.\n   */\n  onMapLoaded: PropTypes.func,\n\n  /**\n   * Callback that is called once the kml is fully loaded.\n   */\n  onKmlReady: PropTypes.func,\n\n  /**\n   * Callback that is called continuously when the user is dragging the map.\n   */\n  onRegionChange: PropTypes.func,\n\n  /**\n   * Callback that is called once, when the user is done moving the map.\n   */\n  onRegionChangeComplete: PropTypes.func,\n\n  /**\n   * Callback that is called when user taps on the map.\n   */\n  onPress: PropTypes.func,\n\n  /**\n   * Callback that is called when user double taps on the map.\n   */\n  onDoublePress: PropTypes.func,\n\n  /**\n   * Callback that is called when user makes a \"long press\" somewhere on the map.\n   */\n  onLongPress: PropTypes.func,\n\n  /**\n   * Callback that is called when the underlying map figures our users current location.\n   */\n  onUserLocationChange: PropTypes.func,\n\n  /**\n   * Callback that is called when user makes a \"drag\" somewhere on the map\n   */\n  onPanDrag: PropTypes.func,\n\n  /**\n   * Callback that is called when user click on a POI\n   */\n  onPoiClick: PropTypes.func,\n\n  /**\n   * Callback that is called when a marker on the map is tapped by the user.\n   */\n  onMarkerPress: PropTypes.func,\n\n  /**\n   * Callback that is called when a marker on the map becomes selected. This will be called when\n   * the callout for that marker is about to be shown.\n   *\n   * @platform ios\n   */\n  onMarkerSelect: PropTypes.func,\n\n  /**\n   * Callback that is called when a marker on the map becomes deselected. This will be called when\n   * the callout for that marker is about to be hidden.\n   *\n   * @platform ios\n   */\n  onMarkerDeselect: PropTypes.func,\n\n  /**\n   * Callback that is called when a callout is tapped by the user.\n   */\n  onCalloutPress: PropTypes.func,\n\n  /**\n   * Callback that is called when the user initiates a drag on a marker (if it is draggable)\n   */\n  onMarkerDragStart: PropTypes.func,\n\n  /**\n   * Callback called continuously as a marker is dragged\n   */\n  onMarkerDrag: PropTypes.func,\n\n  /**\n   * Callback that is called when a drag on a marker finishes. This is usually the point you\n   * will want to setState on the marker's coordinate again\n   */\n  onMarkerDragEnd: PropTypes.func,\n\n  /**\n   * Minimum zoom value for the map, must be between 0 and 20\n   */\n  minZoomLevel: PropTypes.number,\n\n  /**\n   * Maximum zoom value for the map, must be between 0 and 20\n   */\n  maxZoomLevel: PropTypes.number,\n\n  /**\n   * Url KML Source\n   */\n  kmlSrc: PropTypes.string,\n\n  /**\n   * Offset Point x y for compass location.\n   *\n   * @platform ios\n   */\n  compassOffset: PointPropType,\n\n  /**\n   * Callback that is called when a level is activated on a indoor building.\n   */\n  onIndoorLevelActivated: PropTypes.func,\n\n  /**\n   * Callback that is called when a Building is focused.\n   */\n  onIndoorBuildingFocused: PropTypes.func,\n};\n\nclass MapView extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isReady: Platform.OS === 'ios',\n    };\n\n    this._onMapReady = this._onMapReady.bind(this);\n    this._onMarkerPress = this._onMarkerPress.bind(this);\n    this._onChange = this._onChange.bind(this);\n    this._onLayout = this._onLayout.bind(this);\n  }\n\n  getChildContext() {\n    return { provider: this.props.provider };\n  }\n\n  getSnapshotBeforeUpdate(prevProps) {\n    if (\n      this.state.isReady &&\n      this.props.customMapStyle !== prevProps.customMapStyle\n    ) {\n      this._updateStyle(this.props);\n    }\n    return this.props.region || null;\n  }\n\n  componentDidUpdate(prevProps, prevState, region) {\n    const a = this.__lastRegion;\n    const b = region;\n    if (!a || !b) {\n      return;\n    }\n    if (\n      a.latitude !== b.latitude ||\n      a.longitude !== b.longitude ||\n      a.latitudeDelta !== b.latitudeDelta ||\n      a.longitudeDelta !== b.longitudeDelta\n    ) {\n      this.map.setNativeProps({ region: b });\n    }\n  }\n\n  componentDidMount() {\n    const { isReady } = this.state;\n    if (isReady) {\n      this._updateStyle(this.props);\n    }\n  }\n\n  _updateStyle(props) {\n    const { customMapStyle } = props;\n    this.map.setNativeProps({\n      customMapStyleString: JSON.stringify(customMapStyle),\n    });\n  }\n\n  _onMapReady() {\n    const { region, initialRegion, onMapReady } = this.props;\n    if (region) {\n      this.map.setNativeProps({ region });\n    } else if (initialRegion) {\n      this.map.setNativeProps({ initialRegion });\n    }\n    this._updateStyle(this.props);\n    this.setState({ isReady: true }, () => {\n      if (onMapReady) {\n        onMapReady();\n      }\n    });\n  }\n\n  _onLayout(e) {\n    const { layout } = e.nativeEvent;\n    if (!layout.width || !layout.height) {\n      return;\n    }\n    if (this.state.isReady && !this.__layoutCalled) {\n      const { region, initialRegion } = this.props;\n      if (region) {\n        this.__layoutCalled = true;\n        this.map.setNativeProps({ region });\n      } else if (initialRegion) {\n        this.__layoutCalled = true;\n        this.map.setNativeProps({ initialRegion });\n      }\n    }\n    if (this.props.onLayout) {\n      this.props.onLayout(e);\n    }\n  }\n\n  _onMarkerPress(event) {\n    if (this.props.onMarkerPress) {\n      this.props.onMarkerPress(event.nativeEvent);\n    }\n  }\n\n  _onChange(event) {\n    this.__lastRegion = event.nativeEvent.region;\n    if (event.nativeEvent.continuous) {\n      if (this.props.onRegionChange) {\n        this.props.onRegionChange(event.nativeEvent.region);\n      }\n    } else if (this.props.onRegionChangeComplete) {\n      this.props.onRegionChangeComplete(event.nativeEvent.region);\n    }\n  }\n\n  getCamera() {\n    if (Platform.OS === 'android') {\n      return NativeModules.AirMapModule.getCamera(this._getHandle());\n    } else if (Platform.OS === 'ios') {\n      return this._runCommand('getCamera', []);\n    }\n    return Promise.reject('getCamera not supported on this platform');\n  }\n\n  setCamera(camera) {\n    this._runCommand('setCamera', [camera]);\n  }\n\n  animateCamera(camera, opts) {\n    this._runCommand('animateCamera', [camera, (opts && opts.duration) || 500]);\n  }\n\n  animateToNavigation(location, bearing, angle, duration) {\n    console.warn(\n      'animateToNavigation() is deprecated, use animateCamera() instead'\n    );\n    this._runCommand('animateToNavigation', [\n      location,\n      bearing,\n      angle,\n      duration || 500,\n    ]);\n  }\n\n  animateToRegion(region, duration) {\n    this._runCommand('animateToRegion', [region, duration || 500]);\n  }\n\n  animateToCoordinate(latLng, duration) {\n    console.warn(\n      'animateToCoordinate() is deprecated, use animateCamera() instead'\n    );\n    this._runCommand('animateToCoordinate', [latLng, duration || 500]);\n  }\n\n  animateToBearing(bearing, duration) {\n    console.warn(\n      'animateToBearing() is deprecated, use animateCamera() instead'\n    );\n    this._runCommand('animateToBearing', [bearing, duration || 500]);\n  }\n\n  animateToViewingAngle(angle, duration) {\n    console.warn(\n      'animateToViewingAngle() is deprecated, use animateCamera() instead'\n    );\n    this._runCommand('animateToViewingAngle', [angle, duration || 500]);\n  }\n\n  fitToElements(animated) {\n    this._runCommand('fitToElements', [animated]);\n  }\n\n  fitToSuppliedMarkers(markers, options = {}) {\n    const {\n      edgePadding = { top: 0, right: 0, bottom: 0, left: 0 },\n      animated = true,\n    } = options;\n\n    this._runCommand('fitToSuppliedMarkers', [markers, edgePadding, animated]);\n  }\n\n  fitToCoordinates(coordinates = [], options = {}) {\n    const {\n      edgePadding = { top: 0, right: 0, bottom: 0, left: 0 },\n      animated = true,\n    } = options;\n\n    this._runCommand('fitToCoordinates', [coordinates, edgePadding, animated]);\n  }\n\n  /**\n   * Get visible boudaries\n   *\n   * @return Promise Promise with the bounding box ({ northEast: <LatLng>, southWest: <LatLng> })\n   */\n  async getMapBoundaries() {\n    if (Platform.OS === 'android') {\n      return await NativeModules.AirMapModule.getMapBoundaries(\n        this._getHandle()\n      );\n    } else if (Platform.OS === 'ios') {\n      return await this._runCommand('getMapBoundaries', []);\n    }\n    return Promise.reject('getMapBoundaries not supported on this platform');\n  }\n\n  setMapBoundaries(northEast, southWest) {\n    this._runCommand('setMapBoundaries', [northEast, southWest]);\n  }\n\n  setIndoorActiveLevelIndex(activeLevelIndex) {\n    this._runCommand('setIndoorActiveLevelIndex', [activeLevelIndex]);\n  }\n\n  /**\n   * Takes a snapshot of the map and saves it to a picture\n   * file or returns the image as a base64 encoded string.\n   *\n   * @param config Configuration options\n   * @param [config.width] Width of the rendered map-view (when omitted actual view width is used).\n   * @param [config.height] Height of the rendered map-view (when omitted actual height is used).\n   * @param [config.region] Region to render (Only supported on iOS).\n   * @param [config.format] Encoding format ('png', 'jpg') (default: 'png').\n   * @param [config.quality] Compression quality (only used for jpg) (default: 1.0).\n   * @param [config.result] Result format ('file', 'base64') (default: 'file').\n   *\n   * @return Promise Promise with either the file-uri or base64 encoded string\n   */\n  takeSnapshot(args) {\n    // For the time being we support the legacy API on iOS.\n    // This will be removed in a future release and only the\n    // new Promise style API shall be supported.\n    if (Platform.OS === 'ios' && arguments.length === 4) {\n      console.warn(\n        'Old takeSnapshot API has been deprecated; will be removed in the near future'\n      );\n      const width = arguments[0];\n      const height = arguments[1];\n      const region = arguments[2];\n      const callback = arguments[3];\n      this._runCommand('takeSnapshot', [\n        width || 0,\n        height || 0,\n        region || {},\n        'png',\n        1,\n        'legacy',\n        callback,\n      ]);\n      return undefined;\n    }\n\n    // Sanitize inputs\n    const config = {\n      width: args.width || 0,\n      height: args.height || 0,\n      region: args.region || {},\n      format: args.format || 'png',\n      quality: args.quality || 1.0,\n      result: args.result || 'file',\n    };\n    if (config.format !== 'png' && config.format !== 'jpg') {\n      throw new Error('Invalid format specified');\n    }\n    if (config.result !== 'file' && config.result !== 'base64') {\n      throw new Error('Invalid result specified');\n    }\n\n    // Call native function\n    if (Platform.OS === 'android') {\n      return NativeModules.AirMapModule.takeSnapshot(this._getHandle(), config);\n    } else if (Platform.OS === 'ios') {\n      return new Promise((resolve, reject) => {\n        this._runCommand('takeSnapshot', [\n          config.width,\n          config.height,\n          config.region,\n          config.format,\n          config.quality,\n          config.result,\n          (err, snapshot) => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(snapshot);\n            }\n          },\n        ]);\n      });\n    }\n    return Promise.reject('takeSnapshot not supported on this platform');\n  }\n\n  /**\n   * Convert a map coordinate to user-space point\n   *\n   * @param coordinate Coordinate\n   * @param [coordinate.latitude] Latitude\n   * @param [coordinate.longitude] Longitude\n   *\n   * @return Promise Promise with the point ({ x: Number, y: Number })\n   */\n  pointForCoordinate(coordinate) {\n    if (Platform.OS === 'android') {\n      return NativeModules.AirMapModule.pointForCoordinate(\n        this._getHandle(),\n        coordinate\n      );\n    } else if (Platform.OS === 'ios') {\n      return this._runCommand('pointForCoordinate', [coordinate]);\n    }\n    return Promise.reject('pointForCoordinate not supported on this platform');\n  }\n\n  /**\n   * Convert a user-space point to a map coordinate\n   *\n   * @param point Point\n   * @param [point.x] X\n   * @param [point.x] Y\n   *\n   * @return Promise Promise with the coordinate ({ latitude: Number, longitude: Number })\n   */\n  coordinateForPoint(point) {\n    if (Platform.OS === 'android') {\n      return NativeModules.AirMapModule.coordinateForPoint(\n        this._getHandle(),\n        point\n      );\n    } else if (Platform.OS === 'ios') {\n      return this._runCommand('coordinateForPoint', [point]);\n    }\n    return Promise.reject('coordinateForPoint not supported on this platform');\n  }\n\n  /**\n   * Get markers' centers and frames in user-space coordinates\n   *\n   * @param onlyVisible boolean true to include only visible markers, false to include all\n   *\n   * @return Promise Promise with { <identifier>: { point: Point, frame: Frame } }\n   */\n  getMarkersFrames(onlyVisible = false) {\n    if (Platform.OS === 'ios') {\n      return this._runCommand('getMarkersFrames', [onlyVisible]);\n    }\n    return Promise.reject('getMarkersFrames not supported on this platform');\n  }\n\n  /**\n   * Get bounding box from region\n   *\n   * @param region Region\n   *\n   * @return Object Object bounding box ({ northEast: <LatLng>, southWest: <LatLng> })\n   */\n  boundingBoxForRegion(region) {\n    return {\n      northEast: {\n        latitude: region.latitude + region.latitudeDelta / 2,\n        longitude: region.longitude + region.longitudeDelta / 2,\n      },\n      southWest: {\n        latitude: region.latitude - region.latitudeDelta / 2,\n        longitude: region.longitude - region.longitudeDelta / 2,\n      },\n    };\n  }\n\n  _uiManagerCommand(name) {\n    const UIManager = NativeModules.UIManager;\n    const componentName = getAirMapName(this.props.provider);\n\n    if (!UIManager.getViewManagerConfig) {\n      // RN < 0.58\n      return UIManager[componentName].Commands[name];\n    }\n\n    // RN >= 0.58\n    return UIManager.getViewManagerConfig(componentName).Commands[name];\n  }\n\n  _mapManagerCommand(name) {\n    const managerName = getAirMapName(this.props.provider);\n\n    if (managerName === 'UI') {\n      const UIManager = NativeModules.UIManager;\n      if (!UIManager.getViewManagerConfig) {\n        // RN < 0.58\n        return UIManager[name];\n      }\n\n      // RN >= 0.58\n      return UIManager.getViewManagerConfig(name);\n    }\n\n    return NativeModules[`${getAirMapName(this.props.provider)}Manager`][name];\n  }\n\n  _getHandle() {\n    return findNodeHandle(this.map);\n  }\n\n  _runCommand(name, args) {\n    switch (Platform.OS) {\n      case 'android':\n        return NativeModules.UIManager.dispatchViewManagerCommand(\n          this._getHandle(),\n          this._uiManagerCommand(name),\n          args\n        );\n\n      case 'ios':\n        return this._mapManagerCommand(name)(this._getHandle(), ...args);\n\n      default:\n        return Promise.reject(`Invalid platform was passed: ${Platform.OS}`);\n    }\n  }\n\n  render() {\n    let props;\n\n    if (this.state.isReady) {\n      props = {\n        region: null,\n        initialRegion: null,\n        onMarkerPress: this._onMarkerPress,\n        onChange: this._onChange,\n        onMapReady: this._onMapReady,\n        onLayout: this._onLayout,\n        ...this.props,\n      };\n      if (\n        Platform.OS === 'ios' &&\n        props.provider === ProviderConstants.PROVIDER_DEFAULT &&\n        GOOGLE_MAPS_ONLY_TYPES.includes(props.mapType)\n      ) {\n        props.mapType = MAP_TYPES.standard;\n      }\n      props.handlePanDrag = !!props.onPanDrag;\n    } else {\n      props = {\n        style: this.props.style,\n        region: null,\n        initialRegion: null,\n        onMarkerPress: this._onMarkerPress,\n        onChange: this._onChange,\n        onMapReady: this._onMapReady,\n        onLayout: this._onLayout,\n      };\n    }\n\n    if (Platform.OS === 'android' && this.props.liteMode) {\n      return (\n        <AIRMapLite\n          ref={ref => {\n            this.map = ref;\n          }}\n          {...props}\n        />\n      );\n    }\n\n    const AIRMap = getAirMapComponent(this.props.provider);\n\n    return (\n      <AIRMap\n        ref={ref => {\n          this.map = ref;\n        }}\n        {...props}\n      />\n    );\n  }\n}\n\nMapView.propTypes = propTypes;\nMapView.viewConfig = viewConfig;\nMapView.childContextTypes = childContextTypes;\n\nMapView.MAP_TYPES = MAP_TYPES;\n\nconst nativeComponent = Component =>\n  requireNativeComponent(Component, MapView, {\n    nativeOnly: {\n      onChange: true,\n      onMapReady: true,\n      onKmlReady: true,\n      handlePanDrag: true,\n    },\n  });\nconst airMaps = {\n  default: nativeComponent('AIRMap'),\n};\nif (Platform.OS === 'android') {\n  airMaps.google = airMaps.default;\n} else {\n  airMaps.google = googleMapIsInstalled\n    ? nativeComponent('AIRGoogleMap')\n    : createNotSupportedComponent(\n        'react-native-maps: AirGoogleMaps dir must be added to your xCode project to support GoogleMaps on iOS.'\n      );\n}\nconst getAirMapComponent = provider => airMaps[provider || 'default'];\n\nlet AIRMapLite;\nif (!NativeModules.UIManager.getViewManagerConfig) {\n  // RN < 0.58\n  AIRMapLite =\n    NativeModules.UIManager.AIRMapLite &&\n    requireNativeComponent('AIRMapLite', MapView, {\n      nativeOnly: {\n        onChange: true,\n        onMapReady: true,\n        handlePanDrag: true,\n      },\n    });\n} else {\n  // RN >= 0.58\n  AIRMapLite =\n    NativeModules.UIManager.getViewManagerConfig('AIRMapLite') &&\n    requireNativeComponent('AIRMapLite', MapView, {\n      nativeOnly: {\n        onChange: true,\n        onMapReady: true,\n        handlePanDrag: true,\n      },\n    });\n}\n\nexport const Animated = RNAnimated.createAnimatedComponent(MapView);\n\nexport const ProviderPropType = PropTypes.oneOf(\n  Object.values(ProviderConstants)\n);\n\n/**\n * TODO:\n * All of these properties on MapView are unecessary since they can be imported\n * individually with the es6 exports in index.js. Removing them is a breaking change,\n * but potentially allows for better dead code elimination since references are not\n * kept to components which are never used.\n */\n\nMapView.Marker = MapMarker;\nMapView.Polyline = MapPolyline;\nMapView.Polygon = MapPolygon;\nMapView.Circle = MapCircle;\nMapView.UrlTile = MapUrlTile;\nMapView.MapWMSTile = MapWMSTile;\nMapView.LocalTile = MapLocalTile;\nMapView.Heatmap = MapHeatMap;\nMapView.Overlay = MapOverlay;\nMapView.Callout = MapCallout;\nMapView.CalloutSubview = MapCalloutSubview;\nObject.assign(MapView, ProviderConstants);\nMapView.ProviderPropType = ProviderPropType;\n\nMapView.Animated = Animated;\nMapView.AnimatedRegion = AnimatedRegion;\n\nexport default MapView;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}