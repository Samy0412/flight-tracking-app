{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/sammerinio/Documents/flight-tracking-app/node_modules/react-navigation-tabs/src/navigators/createBottomTabNavigator.js\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { ScreenContainer } from 'react-native-screens';\nimport createTabNavigator from \"../utils/createTabNavigator\";\nimport BottomTabBar from \"../views/BottomTabBar\";\nimport ResourceSavingScene from \"../views/ResourceSavingScene\";\nvar TabNavigationView = function (_React$PureComponent) {\n  _inherits(TabNavigationView, _React$PureComponent);\n  function TabNavigationView() {\n    var _getPrototypeOf2;\n    var _this;\n    _classCallCheck(this, TabNavigationView);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TabNavigationView)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      loaded: [_this.props.navigation.state.index]\n    };\n    _this._renderTabBar = function () {\n      var _this$props = _this.props,\n        _this$props$tabBarCom = _this$props.tabBarComponent,\n        TabBarComponent = _this$props$tabBarCom === void 0 ? BottomTabBar : _this$props$tabBarCom,\n        tabBarOptions = _this$props.tabBarOptions,\n        navigation = _this$props.navigation,\n        screenProps = _this$props.screenProps,\n        getLabelText = _this$props.getLabelText,\n        getAccessibilityLabel = _this$props.getAccessibilityLabel,\n        getButtonComponent = _this$props.getButtonComponent,\n        getAccessibilityRole = _this$props.getAccessibilityRole,\n        getAccessibilityStates = _this$props.getAccessibilityStates,\n        getTestID = _this$props.getTestID,\n        renderIcon = _this$props.renderIcon,\n        onTabPress = _this$props.onTabPress,\n        onTabLongPress = _this$props.onTabLongPress;\n      var descriptors = _this.props.descriptors;\n      var state = _this.props.navigation.state;\n      var route = state.routes[state.index];\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n      if (options.tabBarVisible === false) {\n        return null;\n      }\n      return React.createElement(TabBarComponent, _extends({}, tabBarOptions, {\n        jumpTo: _this._jumpTo,\n        navigation: navigation,\n        screenProps: screenProps,\n        onTabPress: onTabPress,\n        onTabLongPress: onTabLongPress,\n        getLabelText: getLabelText,\n        getButtonComponent: getButtonComponent,\n        getAccessibilityLabel: getAccessibilityLabel,\n        getAccessibilityRole: getAccessibilityRole,\n        getAccessibilityStates: getAccessibilityStates,\n        getTestID: getTestID,\n        renderIcon: renderIcon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        }\n      }));\n    };\n    _this._jumpTo = function (key) {\n      var _this$props2 = _this.props,\n        navigation = _this$props2.navigation,\n        onIndexChange = _this$props2.onIndexChange;\n      var index = navigation.state.routes.findIndex(function (route) {\n        return route.key === key;\n      });\n      onIndexChange(index);\n    };\n    return _this;\n  }\n  _createClass(TabNavigationView, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n        navigation = _this$props3.navigation,\n        renderScene = _this$props3.renderScene,\n        lazy = _this$props3.lazy;\n      var routes = navigation.state.routes;\n      var loaded = this.state.loaded;\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        }\n      }, React.createElement(ScreenContainer, {\n        style: styles.pages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        }\n      }, routes.map(function (route, index) {\n        if (lazy && !loaded.includes(index)) {\n          return null;\n        }\n        var isFocused = navigation.state.index === index;\n        return React.createElement(ResourceSavingScene, {\n          key: route.key,\n          style: StyleSheet.absoluteFill,\n          isVisible: isFocused,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          }\n        }, renderScene({\n          route: route\n        }));\n      })), this._renderTabBar());\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var index = nextProps.navigation.state.index;\n      return {\n        loaded: prevState.loaded.includes(index) ? prevState.loaded : [].concat(_toConsumableArray(prevState.loaded), [index])\n      };\n    }\n  }]);\n  return TabNavigationView;\n}(React.PureComponent);\nTabNavigationView.defaultProps = {\n  lazy: true,\n  getAccessibilityRole: function getAccessibilityRole() {\n    return 'button';\n  },\n  getAccessibilityStates: function getAccessibilityStates(_ref) {\n    var focused = _ref.focused;\n    return focused ? ['selected'] : [];\n  }\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  pages: {\n    flex: 1\n  }\n});\nexport default createTabNavigator(TabNavigationView);","map":{"version":3,"names":["React","View","StyleSheet","ScreenContainer","createTabNavigator","BottomTabBar","ResourceSavingScene","TabNavigationView","_React$PureComponent","_inherits","_getPrototypeOf2","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_possibleConstructorReturn","_getPrototypeOf","call","apply","concat","state","loaded","props","navigation","index","_renderTabBar","_this$props","_this$props$tabBarCom","tabBarComponent","TabBarComponent","tabBarOptions","screenProps","getLabelText","getAccessibilityLabel","getButtonComponent","getAccessibilityRole","getAccessibilityStates","getTestID","renderIcon","onTabPress","onTabLongPress","descriptors","route","routes","descriptor","key","options","tabBarVisible","createElement","_extends","jumpTo","_jumpTo","__source","fileName","_jsxFileName","lineNumber","_this$props2","onIndexChange","findIndex","_createClass","value","render","_this$props3","renderScene","lazy","style","styles","container","pages","map","includes","isFocused","absoluteFill","isVisible","getDerivedStateFromProps","nextProps","prevState","_toConsumableArray","PureComponent","defaultProps","_ref","focused","create","flex","overflow"],"sources":["/Users/sammerinio/Documents/flight-tracking-app/node_modules/react-navigation-tabs/src/navigators/createBottomTabNavigator.js"],"sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\n\n// eslint-disable-next-line import/no-unresolved\nimport { ScreenContainer } from 'react-native-screens';\n\nimport createTabNavigator, {\n  type InjectedProps,\n} from '../utils/createTabNavigator';\nimport BottomTabBar, { type TabBarOptions } from '../views/BottomTabBar';\nimport ResourceSavingScene from '../views/ResourceSavingScene';\n\ntype Props = InjectedProps & {\n  getAccessibilityRole: (props: { route: any }) => string,\n  getAccessibilityStates: (props: { route: any }) => Array<string>,\n  lazy?: boolean,\n  tabBarComponent?: React.ComponentType<*>,\n  tabBarOptions?: TabBarOptions,\n};\n\ntype State = {\n  loaded: number[],\n};\n\nclass TabNavigationView extends React.PureComponent<Props, State> {\n  static defaultProps = {\n    lazy: true,\n    getAccessibilityRole: () => 'button',\n    getAccessibilityStates: ({ focused }) => (focused ? ['selected'] : []),\n  };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { index } = nextProps.navigation.state;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(index)\n        ? prevState.loaded\n        : [...prevState.loaded, index],\n    };\n  }\n\n  state = {\n    loaded: [this.props.navigation.state.index],\n  };\n\n  _renderTabBar = () => {\n    const {\n      tabBarComponent: TabBarComponent = BottomTabBar,\n      tabBarOptions,\n      navigation,\n      screenProps,\n      getLabelText,\n      getAccessibilityLabel,\n      getButtonComponent,\n      getAccessibilityRole,\n      getAccessibilityStates,\n      getTestID,\n      renderIcon,\n      onTabPress,\n      onTabLongPress,\n    } = this.props;\n\n    const { descriptors } = this.props;\n    const { state } = this.props.navigation;\n    const route = state.routes[state.index];\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    if (options.tabBarVisible === false) {\n      return null;\n    }\n\n    return (\n      <TabBarComponent\n        {...tabBarOptions}\n        jumpTo={this._jumpTo}\n        navigation={navigation}\n        screenProps={screenProps}\n        onTabPress={onTabPress}\n        onTabLongPress={onTabLongPress}\n        getLabelText={getLabelText}\n        getButtonComponent={getButtonComponent}\n        getAccessibilityLabel={getAccessibilityLabel}\n        getAccessibilityRole={getAccessibilityRole}\n        getAccessibilityStates={getAccessibilityStates}\n        getTestID={getTestID}\n        renderIcon={renderIcon}\n      />\n    );\n  };\n\n  _jumpTo = (key: string) => {\n    const { navigation, onIndexChange } = this.props;\n\n    const index = navigation.state.routes.findIndex(route => route.key === key);\n\n    onIndexChange(index);\n  };\n\n  render() {\n    const { navigation, renderScene, lazy } = this.props;\n    const { routes } = navigation.state;\n    const { loaded } = this.state;\n\n    return (\n      <View style={styles.container}>\n        <ScreenContainer style={styles.pages}>\n          {routes.map((route, index) => {\n            if (lazy && !loaded.includes(index)) {\n              // Don't render a screen if we've never navigated to it\n              return null;\n            }\n\n            const isFocused = navigation.state.index === index;\n\n            return (\n              <ResourceSavingScene\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                isVisible={isFocused}\n              >\n                {renderScene({ route })}\n              </ResourceSavingScene>\n            );\n          })}\n        </ScreenContainer>\n        {this._renderTabBar()}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  pages: {\n    flex: 1,\n  },\n});\n\nexport default createTabNavigator(TabNavigationView);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}