{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _wrapNativeSuper from \"@babel/runtime/helpers/wrapNativeSuper\";\nexport var CodedError = function (_Error) {\n  _inherits(CodedError, _Error);\n  function CodedError(code, message) {\n    var _this;\n    _classCallCheck(this, CodedError);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CodedError).call(this, message));\n    _this.code = code;\n    return _this;\n  }\n  return CodedError;\n}(_wrapNativeSuper(Error));","map":{"version":3,"names":["CodedError","_Error","_inherits","code","message","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","call","_wrapNativeSuper","Error"],"sources":["/Users/sammerinio/Documents/flight-tracking-app/node_modules/@unimodules/react-native-adapter/src/errors/CodedError.ts"],"sourcesContent":["/**\n * A general error class that should be used for all errors in Expo modules.\n * Guarantees a `code` field that can be used to differentiate between different\n * types of errors without further subclassing Error.\n */\nexport class CodedError extends Error {\n  code: string;\n  info?: any;\n\n  constructor(code: string, message: string) {\n    super(message);\n    this.code = code;\n  }\n}\n"],"mappings":";;;;;AAKA,WAAaA,UAAW,aAAAC,MAAA;EAAAC,SAAA,CAAAF,UAAA,EAAAC,MAAA;EAItB,SAAAD,WAAYG,IAAY,EAAEC,OAAe;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAN,UAAA;IACvCK,KAAA,GAAAE,0BAAA,OAAAC,eAAA,CAAAR,UAAA,EAAAS,IAAA,OAAML,OAAO;IACbC,KAAA,CAAKF,IAAI,GAAGA,IAAI;IAAC,OAAAE,KAAA;EACnB;EAAC,OAAAL,UAAA;AAAA,EAAAU,gBAAA,CAP6BC,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}