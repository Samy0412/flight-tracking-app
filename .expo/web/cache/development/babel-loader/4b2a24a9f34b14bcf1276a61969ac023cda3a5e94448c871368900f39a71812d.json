{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/sammerinio/Documents/flight-tracking-app/node_modules/@react-navigation/native/dist/createAppContainer.js\";\nimport React from 'react';\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport { NavigationActions, ThemeProvider, pathUtils, getNavigation, NavigationProvider } from '@react-navigation/core';\nimport invariant from \"./utils/invariant\";\nimport docsUrl from \"./utils/docsUrl\";\nvar urlToPathAndParams = pathUtils.urlToPathAndParams;\nfunction isStateful(props) {\n  return !props.navigation;\n}\nfunction validateProps(props) {\n  if (props.persistenceKey) {\n    console.warn('You passed persistenceKey prop to a navigator. ' + 'The persistenceKey prop was replaced by a more flexible persistence mechanism, ' + 'please see the navigation state persistence docs for more information. ' + 'Passing the persistenceKey prop is a no-op.');\n  }\n  if (isStateful(props)) {\n    return;\n  }\n  var navigation = props.navigation,\n    screenProps = props.screenProps,\n    persistNavigationState = props.persistNavigationState,\n    loadNavigationState = props.loadNavigationState,\n    theme = props.theme,\n    containerProps = _objectWithoutProperties(props, [\"navigation\", \"screenProps\", \"persistNavigationState\", \"loadNavigationState\", \"theme\"]);\n  var keys = Object.keys(containerProps);\n  if (keys.length !== 0) {\n    throw new Error('This navigator has both navigation and container props, so it is ' + (\"unclear if it should own its own state. Remove props: \\\"\" + keys.join(', ') + \"\\\" \") + 'if the navigator should get its state from the navigation prop. If the ' + 'navigator should maintain its own state, do not pass a navigation prop.');\n  }\n  invariant(persistNavigationState === undefined && loadNavigationState === undefined || typeof persistNavigationState === 'function' && typeof loadNavigationState === 'function', 'both persistNavigationState and loadNavigationState must either be undefined, or be functions');\n}\nvar _statefulContainerCount = 0;\nexport function _TESTING_ONLY_reset_container_count() {\n  _statefulContainerCount = 0;\n}\nvar _reactNavigationIsHydratingState = false;\nexport default function createNavigationContainer(Component) {\n  var NavigationContainer = function (_React$Component) {\n    _inherits(NavigationContainer, _React$Component);\n    _createClass(NavigationContainer, null, [{\n      key: \"getDerivedStateFromProps\",\n      value: function getDerivedStateFromProps(nextProps) {\n        validateProps(nextProps);\n        return null;\n      }\n    }]);\n    function NavigationContainer(props) {\n      var _this;\n      _classCallCheck(this, NavigationContainer);\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(NavigationContainer).call(this, props));\n      _this.subs = null;\n      _this._actionEventSubscribers = new Set();\n      _this._handleOpenURL = function (_ref) {\n        var url = _ref.url;\n        var _this$props = _this.props,\n          enableURLHandling = _this$props.enableURLHandling,\n          uriPrefix = _this$props.uriPrefix;\n        if (enableURLHandling === false) {\n          return;\n        }\n        var parsedUrl = urlToPathAndParams(url, uriPrefix);\n        if (parsedUrl) {\n          var path = parsedUrl.path,\n            params = parsedUrl.params;\n          var action = Component.router.getActionForPathAndParams(path, params);\n          if (action) {\n            _this.dispatch(action);\n          }\n        }\n      };\n      _this._persistNavigationState = function _callee(nav) {\n        var persistNavigationState;\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                persistNavigationState = _this.props.persistNavigationState;\n                if (!persistNavigationState) {\n                  _context.next = 10;\n                  break;\n                }\n                _context.prev = 2;\n                _context.next = 5;\n                return _regeneratorRuntime.awrap(persistNavigationState(nav));\n              case 5:\n                _context.next = 10;\n                break;\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](2);\n                console.warn('Uncaught exception while calling persistNavigationState()! You should handle exceptions thrown from persistNavigationState(), ignoring them may result in undefined behavior.');\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, [[2, 7]]);\n      };\n      _this.dispatch = function (action) {\n        if (_this.props.navigation) {\n          return _this.props.navigation.dispatch(action);\n        }\n        _this._navState = _this._navState || _this.state.nav;\n        var lastNavState = _this._navState;\n        invariant(lastNavState, 'should be set in constructor if stateful');\n        var reducedState = Component.router.getStateForAction(action, lastNavState);\n        var navState = reducedState === null ? lastNavState : reducedState;\n        var dispatchActionEvents = function dispatchActionEvents() {\n          _this._actionEventSubscribers.forEach(function (subscriber) {\n            return subscriber({\n              type: 'action',\n              action: action,\n              state: navState,\n              lastState: lastNavState\n            });\n          });\n        };\n        if (reducedState === null) {\n          dispatchActionEvents();\n          return true;\n        }\n        if (navState !== lastNavState) {\n          _this._navState = navState;\n          _this.setState({\n            nav: navState\n          }, function () {\n            _this._onNavigationStateChange(lastNavState, navState, action);\n            dispatchActionEvents();\n            _this._persistNavigationState(navState);\n          });\n          return true;\n        }\n        dispatchActionEvents();\n        return false;\n      };\n      _this._getScreenProps = function () {\n        return _this.props.screenProps;\n      };\n      _this._getTheme = function () {\n        if (_this.props.theme === 'light' || _this.props.theme === 'dark') {\n          return _this.props.theme;\n        } else if (_this.props.theme === 'no-preference') {\n          return 'light';\n        } else {\n          console.warn(\"Invalid theme provided: \" + _this.props.theme + \". Only 'light' and 'dark' are supported. Falling back to 'light'\");\n          return 'light';\n        }\n      };\n      validateProps(props);\n      _this._initialAction = NavigationActions.init();\n      if (_this._isStateful() && BackHandler && typeof BackHandler.addEventListener === 'function') {\n        _this.subs = BackHandler.addEventListener('hardwareBackPress', function () {\n          if (!_this._isMounted) {\n            _this.subs && _this.subs.remove();\n          } else {\n            return _this.dispatch(NavigationActions.back());\n          }\n        });\n      }\n      _this.state = {\n        nav: _this._isStateful() && !props.loadNavigationState ? Component.router.getStateForAction(_this._initialAction) : null\n      };\n      return _this;\n    }\n    _createClass(NavigationContainer, [{\n      key: \"_renderLoading\",\n      value: function _renderLoading() {\n        return this.props.renderLoadingExperimental ? this.props.renderLoadingExperimental() : null;\n      }\n    }, {\n      key: \"_isStateful\",\n      value: function _isStateful() {\n        return isStateful(this.props);\n      }\n    }, {\n      key: \"_onNavigationStateChange\",\n      value: function _onNavigationStateChange(prevNav, nav, action) {\n        if (typeof this.props.onNavigationStateChange === 'undefined' && this._isStateful() && !!process.env.REACT_NAV_LOGGING) {\n          if (console.group) {\n            console.group('Navigation Dispatch: ');\n            console.log('Action: ', action);\n            console.log('New State: ', nav);\n            console.log('Last State: ', prevNav);\n            console.groupEnd();\n          } else {\n            console.log('Navigation Dispatch: ', {\n              action: action,\n              newState: nav,\n              lastState: prevNav\n            });\n          }\n          return;\n        }\n        if (typeof this.props.onNavigationStateChange === 'function') {\n          this.props.onNavigationStateChange(prevNav, nav, action);\n        }\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate() {\n        if (this._navState === this.state.nav) {\n          this._navState = null;\n        }\n      }\n    }, {\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this2 = this;\n        var parsedUrl, userProvidedStartupState, _await$this$getStartu, action, startupState, _parsedUrl, path, params, urlAction, dispatchActions;\n        return _regeneratorRuntime.async(function componentDidMount$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this._isMounted = true;\n                if (this._isStateful()) {\n                  _context2.next = 3;\n                  break;\n                }\n                return _context2.abrupt(\"return\");\n              case 3:\n                if (__DEV__ && !this.props.detached) {\n                  if (_statefulContainerCount > 0) {\n                    if (Platform.OS === 'ios') {\n                      console.warn(\"You should only render one navigator explicitly in your app, and other navigators should be rendered by including them in that navigator. Full details at: \" + docsUrl('common-mistakes.html#explicitly-rendering-more-than-one-navigator'));\n                    }\n                  }\n                }\n                _statefulContainerCount++;\n                Linking.addEventListener('url', this._handleOpenURL);\n                parsedUrl = null;\n                userProvidedStartupState = null;\n                if (!(this.props.enableURLHandling !== false)) {\n                  _context2.next = 14;\n                  break;\n                }\n                _context2.next = 11;\n                return _regeneratorRuntime.awrap(this.getStartupParams());\n              case 11:\n                _await$this$getStartu = _context2.sent;\n                parsedUrl = _await$this$getStartu.parsedUrl;\n                userProvidedStartupState = _await$this$getStartu.userProvidedStartupState;\n              case 14:\n                action = this._initialAction;\n                startupState = this.state.nav;\n                if (!startupState && !userProvidedStartupState) {\n                  !!process.env.REACT_NAV_LOGGING && console.log('Init new Navigation State');\n                  startupState = Component.router.getStateForAction(action);\n                }\n                if (userProvidedStartupState) {\n                  startupState = userProvidedStartupState;\n                  _reactNavigationIsHydratingState = true;\n                }\n                if (parsedUrl) {\n                  _parsedUrl = parsedUrl, path = _parsedUrl.path, params = _parsedUrl.params;\n                  urlAction = Component.router.getActionForPathAndParams(path, params);\n                  if (urlAction) {\n                    !!process.env.REACT_NAV_LOGGING && console.log('Applying Navigation Action for Initial URL:', parsedUrl);\n                    action = urlAction;\n                    startupState = Component.router.getStateForAction(urlAction, startupState);\n                  }\n                }\n                dispatchActions = function dispatchActions() {\n                  return _this2._actionEventSubscribers.forEach(function (subscriber) {\n                    return subscriber({\n                      type: 'action',\n                      action: action,\n                      state: _this2.state.nav,\n                      lastState: null\n                    });\n                  });\n                };\n                if (!(startupState === this.state.nav)) {\n                  _context2.next = 23;\n                  break;\n                }\n                dispatchActions();\n                return _context2.abrupt(\"return\");\n              case 23:\n                this.setState({\n                  nav: startupState\n                }, function () {\n                  _reactNavigationIsHydratingState = false;\n                  dispatchActions();\n                });\n              case 24:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, this);\n      }\n    }, {\n      key: \"getStartupParams\",\n      value: function getStartupParams() {\n        var _this$props2, uriPrefix, loadNavigationState, url, loadedNavState, _await$Promise$all, _await$Promise$all2;\n        return _regeneratorRuntime.async(function getStartupParams$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this$props2 = this.props, uriPrefix = _this$props2.uriPrefix, loadNavigationState = _this$props2.loadNavigationState;\n                _context3.prev = 1;\n                _context3.next = 4;\n                return _regeneratorRuntime.awrap(Promise.all([Linking.getInitialURL(), loadNavigationState && loadNavigationState()]));\n              case 4:\n                _await$Promise$all = _context3.sent;\n                _await$Promise$all2 = _slicedToArray(_await$Promise$all, 2);\n                url = _await$Promise$all2[0];\n                loadedNavState = _await$Promise$all2[1];\n                _context3.next = 12;\n                break;\n              case 10:\n                _context3.prev = 10;\n                _context3.t0 = _context3[\"catch\"](1);\n              case 12:\n                return _context3.abrupt(\"return\", {\n                  parsedUrl: url && urlToPathAndParams(url, uriPrefix),\n                  userProvidedStartupState: loadedNavState\n                });\n              case 13:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, null, this, [[1, 10]]);\n      }\n    }, {\n      key: \"componentDidCatch\",\n      value: function componentDidCatch(e) {\n        if (_reactNavigationIsHydratingState) {\n          _reactNavigationIsHydratingState = false;\n          console.warn('Uncaught exception while starting app from persisted navigation state! Trying to render again with a fresh navigation state...');\n          this.dispatch(NavigationActions.init());\n        } else {\n          throw e;\n        }\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this._isMounted = false;\n        Linking.removeEventListener('url', this._handleOpenURL);\n        this.subs && this.subs.remove();\n        if (this._isStateful()) {\n          _statefulContainerCount--;\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this3 = this;\n        var navigation = this.props.navigation;\n        if (this._isStateful()) {\n          var navState = this.state.nav;\n          if (!navState) {\n            return this._renderLoading();\n          }\n          if (!this._navigation || this._navigation.state !== navState) {\n            this._navigation = getNavigation(Component.router, navState, this.dispatch, this._actionEventSubscribers, this._getScreenProps, function () {\n              return _this3._navigation;\n            });\n          }\n          navigation = this._navigation;\n        }\n        invariant(navigation, 'failed to get navigation');\n        return React.createElement(ThemeProvider, {\n          value: this._getTheme(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 349\n          }\n        }, React.createElement(NavigationProvider, {\n          value: navigation,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 350\n          }\n        }, React.createElement(Component, _extends({}, this.props, {\n          navigation: navigation,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 351\n          }\n        }))));\n      }\n    }]);\n    return NavigationContainer;\n  }(React.Component);\n  NavigationContainer.router = Component.router;\n  NavigationContainer.navigationOptions = null;\n  NavigationContainer.defaultProps = {\n    theme: 'light'\n  };\n  return NavigationContainer;\n}","map":{"version":3,"names":["React","Linking","Platform","BackHandler","NavigationActions","ThemeProvider","pathUtils","getNavigation","NavigationProvider","invariant","docsUrl","urlToPathAndParams","isStateful","props","navigation","validateProps","persistenceKey","console","warn","screenProps","persistNavigationState","loadNavigationState","theme","containerProps","_objectWithoutProperties","keys","Object","length","Error","join","undefined","_statefulContainerCount","_TESTING_ONLY_reset_container_count","_reactNavigationIsHydratingState","createNavigationContainer","Component","NavigationContainer","_React$Component","_inherits","_createClass","key","value","getDerivedStateFromProps","nextProps","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","call","subs","_actionEventSubscribers","Set","_handleOpenURL","_ref","url","_this$props","enableURLHandling","uriPrefix","parsedUrl","path","params","action","router","getActionForPathAndParams","dispatch","_persistNavigationState","_callee","nav","_regeneratorRuntime","async","_callee$","_context","prev","next","awrap","t0","stop","_navState","state","lastNavState","reducedState","getStateForAction","navState","dispatchActionEvents","forEach","subscriber","type","lastState","setState","_onNavigationStateChange","_getScreenProps","_getTheme","_initialAction","init","_isStateful","addEventListener","_isMounted","remove","back","_renderLoading","renderLoadingExperimental","prevNav","onNavigationStateChange","process","env","REACT_NAV_LOGGING","group","log","groupEnd","newState","componentDidUpdate","componentDidMount","_this2","userProvidedStartupState","_await$this$getStartu","startupState","_parsedUrl","urlAction","dispatchActions","componentDidMount$","_context2","abrupt","__DEV__","detached","OS","getStartupParams","sent","_this$props2","loadedNavState","_await$Promise$all","_await$Promise$all2","getStartupParams$","_context3","Promise","all","getInitialURL","_slicedToArray","componentDidCatch","e","componentWillUnmount","removeEventListener","render","_this3","_navigation","createElement","__source","fileName","_jsxFileName","lineNumber","_extends","navigationOptions","defaultProps"],"sources":["/Users/sammerinio/Documents/flight-tracking-app/node_modules/@react-navigation/native/dist/createAppContainer.js"],"sourcesContent":["import React from 'react';\nimport { Linking, Platform, BackHandler } from 'react-native';\nimport { NavigationActions, ThemeProvider, pathUtils, getNavigation, NavigationProvider } from '@react-navigation/core';\nimport invariant from './utils/invariant';\nimport docsUrl from './utils/docsUrl';\n\nconst { urlToPathAndParams } = pathUtils;\n\nfunction isStateful(props) {\n  return !props.navigation;\n}\n\nfunction validateProps(props) {\n  if (props.persistenceKey) {\n    console.warn('You passed persistenceKey prop to a navigator. ' + 'The persistenceKey prop was replaced by a more flexible persistence mechanism, ' + 'please see the navigation state persistence docs for more information. ' + 'Passing the persistenceKey prop is a no-op.');\n  }\n  if (isStateful(props)) {\n    return;\n  }\n  /* eslint-disable no-unused-vars */\n  const {\n    navigation,\n    screenProps,\n    persistNavigationState,\n    loadNavigationState,\n    theme,\n    ...containerProps\n  } = props;\n  /* eslint-enable no-unused-vars */\n\n  const keys = Object.keys(containerProps);\n\n  if (keys.length !== 0) {\n    throw new Error('This navigator has both navigation and container props, so it is ' + `unclear if it should own its own state. Remove props: \"${keys.join(', ')}\" ` + 'if the navigator should get its state from the navigation prop. If the ' + 'navigator should maintain its own state, do not pass a navigation prop.');\n  }\n  invariant(persistNavigationState === undefined && loadNavigationState === undefined || typeof persistNavigationState === 'function' && typeof loadNavigationState === 'function', 'both persistNavigationState and loadNavigationState must either be undefined, or be functions');\n}\n\n// Track the number of stateful container instances. Warn if >0 and not using the\n// detached prop to explicitly acknowledge the behavior. We should deprecated implicit\n// stateful navigation containers in a future release and require a provider style pattern\n// instead in order to eliminate confusion entirely.\nlet _statefulContainerCount = 0;\nexport function _TESTING_ONLY_reset_container_count() {\n  _statefulContainerCount = 0;\n}\n\n// We keep a global flag to catch errors during the state persistence hydrating scenario.\n// The innermost navigator who catches the error will dispatch a new init action.\nlet _reactNavigationIsHydratingState = false;\n// Unfortunate to use global state here, but it seems necessesary for the time\n// being. There seems to be some problems with cascading componentDidCatch\n// handlers. Ideally the inner non-stateful navigator catches the error and\n// re-throws it, to be caught by the top-level stateful navigator.\n\n/**\n * Create an HOC that injects the navigation and manages the navigation state\n * in case it's not passed from above.\n * This allows to use e.g. the StackNavigator and TabNavigator as root-level\n * components.\n */\nexport default function createNavigationContainer(Component) {\n  class NavigationContainer extends React.Component {\n    subs = null;\n\n    static router = Component.router;\n    static navigationOptions = null;\n\n    static defaultProps = {\n      theme: 'light'\n    };\n\n    static getDerivedStateFromProps(nextProps) {\n      validateProps(nextProps);\n      return null;\n    }\n\n    _actionEventSubscribers = new Set();\n\n    constructor(props) {\n      super(props);\n\n      validateProps(props);\n\n      this._initialAction = NavigationActions.init();\n\n      if (this._isStateful() && BackHandler && typeof BackHandler.addEventListener === 'function') {\n        this.subs = BackHandler.addEventListener('hardwareBackPress', () => {\n          if (!this._isMounted) {\n            this.subs && this.subs.remove();\n          } else {\n            // dispatch returns true if the action results in a state change,\n            // and false otherwise. This maps well to what BackHandler expects\n            // from a callback -- true if handled, false if not handled\n            return this.dispatch(NavigationActions.back());\n          }\n        });\n      }\n\n      this.state = {\n        nav: this._isStateful() && !props.loadNavigationState ? Component.router.getStateForAction(this._initialAction) : null\n      };\n    }\n\n    _renderLoading() {\n      return this.props.renderLoadingExperimental ? this.props.renderLoadingExperimental() : null;\n    }\n\n    _isStateful() {\n      return isStateful(this.props);\n    }\n\n    _handleOpenURL = ({ url }) => {\n      const { enableURLHandling, uriPrefix } = this.props;\n      if (enableURLHandling === false) {\n        return;\n      }\n      const parsedUrl = urlToPathAndParams(url, uriPrefix);\n      if (parsedUrl) {\n        const { path, params } = parsedUrl;\n        const action = Component.router.getActionForPathAndParams(path, params);\n        if (action) {\n          this.dispatch(action);\n        }\n      }\n    };\n\n    _onNavigationStateChange(prevNav, nav, action) {\n      if (typeof this.props.onNavigationStateChange === 'undefined' && this._isStateful() && !!process.env.REACT_NAV_LOGGING) {\n        if (console.group) {\n          console.group('Navigation Dispatch: ');\n          console.log('Action: ', action);\n          console.log('New State: ', nav);\n          console.log('Last State: ', prevNav);\n          console.groupEnd();\n        } else {\n          console.log('Navigation Dispatch: ', {\n            action,\n            newState: nav,\n            lastState: prevNav\n          });\n        }\n        return;\n      }\n\n      if (typeof this.props.onNavigationStateChange === 'function') {\n        this.props.onNavigationStateChange(prevNav, nav, action);\n      }\n    }\n\n    componentDidUpdate() {\n      // Clear cached _navState every tick\n      if (this._navState === this.state.nav) {\n        this._navState = null;\n      }\n    }\n\n    async componentDidMount() {\n      this._isMounted = true;\n      if (!this._isStateful()) {\n        return;\n      }\n\n      if (__DEV__ && !this.props.detached) {\n        if (_statefulContainerCount > 0) {\n          // Temporarily only show this on iOS due to this issue:\n          // https://github.com/react-navigation/react-navigation/issues/4196#issuecomment-390827829\n          if (Platform.OS === 'ios') {\n            console.warn(`You should only render one navigator explicitly in your app, and other navigators should be rendered by including them in that navigator. Full details at: ${docsUrl('common-mistakes.html#explicitly-rendering-more-than-one-navigator')}`);\n          }\n        }\n      }\n      _statefulContainerCount++;\n      Linking.addEventListener('url', this._handleOpenURL);\n\n      // Pull out anything that can impact state\n      let parsedUrl = null;\n      let userProvidedStartupState = null;\n      if (this.props.enableURLHandling !== false) {\n        ({\n          parsedUrl,\n          userProvidedStartupState\n        } = await this.getStartupParams());\n      }\n\n      // Initialize state. This must be done *after* any async code\n      // so we don't end up with a different value for this.state.nav\n      // due to changes while async function was resolving\n      let action = this._initialAction;\n      let startupState = this.state.nav;\n      if (!startupState && !userProvidedStartupState) {\n        !!process.env.REACT_NAV_LOGGING && console.log('Init new Navigation State');\n        startupState = Component.router.getStateForAction(action);\n      }\n\n      // Pull user-provided persisted state\n      if (userProvidedStartupState) {\n        startupState = userProvidedStartupState;\n        _reactNavigationIsHydratingState = true;\n      }\n\n      // Pull state out of URL\n      if (parsedUrl) {\n        const { path, params } = parsedUrl;\n        const urlAction = Component.router.getActionForPathAndParams(path, params);\n        if (urlAction) {\n          !!process.env.REACT_NAV_LOGGING && console.log('Applying Navigation Action for Initial URL:', parsedUrl);\n          action = urlAction;\n          startupState = Component.router.getStateForAction(urlAction, startupState);\n        }\n      }\n\n      const dispatchActions = () => this._actionEventSubscribers.forEach(subscriber => subscriber({\n        type: 'action',\n        action,\n        state: this.state.nav,\n        lastState: null\n      }));\n\n      if (startupState === this.state.nav) {\n        dispatchActions();\n        return;\n      }\n\n      // eslint-disable-next-line react/no-did-mount-set-state\n      this.setState({ nav: startupState }, () => {\n        _reactNavigationIsHydratingState = false;\n        dispatchActions();\n      });\n    }\n\n    async getStartupParams() {\n      const { uriPrefix, loadNavigationState } = this.props;\n      let url, loadedNavState;\n      try {\n        [url, loadedNavState] = await Promise.all([Linking.getInitialURL(), loadNavigationState && loadNavigationState()]);\n      } catch (err) {\n        // ignore\n      }\n      return {\n        parsedUrl: url && urlToPathAndParams(url, uriPrefix),\n        userProvidedStartupState: loadedNavState\n      };\n    }\n\n    componentDidCatch(e) {\n      if (_reactNavigationIsHydratingState) {\n        _reactNavigationIsHydratingState = false;\n        console.warn('Uncaught exception while starting app from persisted navigation state! Trying to render again with a fresh navigation state...');\n        this.dispatch(NavigationActions.init());\n      } else {\n        throw e;\n      }\n    }\n\n    _persistNavigationState = async nav => {\n      const { persistNavigationState } = this.props;\n      if (persistNavigationState) {\n        try {\n          await persistNavigationState(nav);\n        } catch (err) {\n          console.warn('Uncaught exception while calling persistNavigationState()! You should handle exceptions thrown from persistNavigationState(), ignoring them may result in undefined behavior.');\n        }\n      }\n    };\n\n    componentWillUnmount() {\n      this._isMounted = false;\n      Linking.removeEventListener('url', this._handleOpenURL);\n      this.subs && this.subs.remove();\n\n      if (this._isStateful()) {\n        _statefulContainerCount--;\n      }\n    }\n\n    // Per-tick temporary storage for state.nav\n\n    dispatch = action => {\n      if (this.props.navigation) {\n        return this.props.navigation.dispatch(action);\n      }\n\n      // navState will have the most up-to-date value, because setState sometimes behaves asyncronously\n      this._navState = this._navState || this.state.nav;\n      const lastNavState = this._navState;\n      invariant(lastNavState, 'should be set in constructor if stateful');\n      const reducedState = Component.router.getStateForAction(action, lastNavState);\n      const navState = reducedState === null ? lastNavState : reducedState;\n\n      const dispatchActionEvents = () => {\n        this._actionEventSubscribers.forEach(subscriber => subscriber({\n          type: 'action',\n          action,\n          state: navState,\n          lastState: lastNavState\n        }));\n      };\n\n      if (reducedState === null) {\n        // The router will return null when action has been handled and the state hasn't changed.\n        // dispatch returns true when something has been handled.\n        dispatchActionEvents();\n        return true;\n      }\n\n      if (navState !== lastNavState) {\n        // Cache updates to state.nav during the tick to ensure that subsequent calls will not discard this change\n        this._navState = navState;\n        this.setState({ nav: navState }, () => {\n          this._onNavigationStateChange(lastNavState, navState, action);\n          dispatchActionEvents();\n          this._persistNavigationState(navState);\n        });\n        return true;\n      }\n\n      dispatchActionEvents();\n      return false;\n    };\n\n    _getScreenProps = () => this.props.screenProps;\n\n    _getTheme = () => {\n      if (this.props.theme === 'light' || this.props.theme === 'dark') {\n        return this.props.theme;\n      } else if (this.props.theme === 'no-preference') {\n        return 'light';\n      } else {\n        console.warn(`Invalid theme provided: ${this.props.theme}. Only 'light' and 'dark' are supported. Falling back to 'light'`);\n        return 'light';\n      }\n    };\n\n    render() {\n      let navigation = this.props.navigation;\n      if (this._isStateful()) {\n        const navState = this.state.nav;\n        if (!navState) {\n          return this._renderLoading();\n        }\n        if (!this._navigation || this._navigation.state !== navState) {\n          this._navigation = getNavigation(Component.router, navState, this.dispatch, this._actionEventSubscribers, this._getScreenProps, () => this._navigation);\n        }\n        navigation = this._navigation;\n      }\n      invariant(navigation, 'failed to get navigation');\n\n      return <ThemeProvider value={this._getTheme()}>\n          <NavigationProvider value={navigation}>\n            <Component {...this.props} navigation={navigation} />\n          </NavigationProvider>\n        </ThemeProvider>;\n    }\n  }\n\n  return NavigationContainer;\n}"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,OAAAC,OAAA;AAAA,OAAAC,QAAA;AAAA,OAAAC,WAAA;AAE1B,SAASC,iBAAiB,EAAEC,aAAa,EAAEC,SAAS,EAAEC,aAAa,EAAEC,kBAAkB,QAAQ,wBAAwB;AACvH,OAAOC,SAAS;AAChB,OAAOC,OAAO;AAAwB,IAE9BC,kBAAkB,GAAKL,SAAS,CAAhCK,kBAAkB;AAE1B,SAASC,UAAUA,CAACC,KAAK,EAAE;EACzB,OAAO,CAACA,KAAK,CAACC,UAAU;AAC1B;AAEA,SAASC,aAAaA,CAACF,KAAK,EAAE;EAC5B,IAAIA,KAAK,CAACG,cAAc,EAAE;IACxBC,OAAO,CAACC,IAAI,CAAC,iDAAiD,GAAG,iFAAiF,GAAG,yEAAyE,GAAG,6CAA6C,CAAC;EACjR;EACA,IAAIN,UAAU,CAACC,KAAK,CAAC,EAAE;IACrB;EACF;EAAC,IAGCC,UAAU,GAMRD,KAAK,CANPC,UAAU;IACVK,WAAW,GAKTN,KAAK,CALPM,WAAW;IACXC,sBAAsB,GAIpBP,KAAK,CAJPO,sBAAsB;IACtBC,mBAAmB,GAGjBR,KAAK,CAHPQ,mBAAmB;IACnBC,KAAK,GAEHT,KAAK,CAFPS,KAAK;IACFC,cAAc,GAAAC,wBAAA,CACfX,KAAK;EAGT,IAAMY,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACF,cAAc,CAAC;EAExC,IAAIE,IAAI,CAACE,MAAM,KAAK,CAAC,EAAE;IACrB,MAAM,IAAIC,KAAK,CAAC,mEAAmE,iEAA6DH,IAAI,CAACI,IAAI,CAAC,IAAI,CAAC,SAAI,GAAG,yEAAyE,GAAG,yEAAyE,CAAC;EAC9T;EACApB,SAAS,CAACW,sBAAsB,KAAKU,SAAS,IAAIT,mBAAmB,KAAKS,SAAS,IAAI,OAAOV,sBAAsB,KAAK,UAAU,IAAI,OAAOC,mBAAmB,KAAK,UAAU,EAAE,+FAA+F,CAAC;AACpR;AAMA,IAAIU,uBAAuB,GAAG,CAAC;AAC/B,OAAO,SAASC,mCAAmCA,CAAA,EAAG;EACpDD,uBAAuB,GAAG,CAAC;AAC7B;AAIA,IAAIE,gCAAgC,GAAG,KAAK;AAY5C,eAAe,SAASC,yBAAyBA,CAACC,SAAS,EAAE;EAAA,IACrDC,mBAAmB,aAAAC,gBAAA;IAAAC,SAAA,CAAAF,mBAAA,EAAAC,gBAAA;IAAAE,YAAA,CAAAH,mBAAA;MAAAI,GAAA;MAAAC,KAAA,WAAAC,yBAUSC,SAAS,EAAE;QACzC5B,aAAa,CAAC4B,SAAS,CAAC;QACxB,OAAO,IAAI;MACb;IAAC;IAID,SAAAP,oBAAYvB,KAAK,EAAE;MAAA,IAAA+B,KAAA;MAAAC,eAAA,OAAAT,mBAAA;MACjBQ,KAAA,GAAAE,0BAAA,OAAAC,eAAA,CAAAX,mBAAA,EAAAY,IAAA,OAAMnC,KAAK;MAAE+B,KAAA,CAjBfK,IAAI,GAAG,IAAI;MAAAL,KAAA,CAcXM,uBAAuB,GAAG,IAAIC,GAAG,EAAE;MAAAP,KAAA,CAmCnCQ,cAAc,GAAG,UAAAC,IAAA,EAAa;QAAA,IAAVC,GAAG,GAAAD,IAAA,CAAHC,GAAG;QAAA,IAAAC,WAAA,GACoBX,KAAA,CAAK/B,KAAK;UAA3C2C,iBAAiB,GAAAD,WAAA,CAAjBC,iBAAiB;UAAEC,SAAS,GAAAF,WAAA,CAATE,SAAS;QACpC,IAAID,iBAAiB,KAAK,KAAK,EAAE;UAC/B;QACF;QACA,IAAME,SAAS,GAAG/C,kBAAkB,CAAC2C,GAAG,EAAEG,SAAS,CAAC;QACpD,IAAIC,SAAS,EAAE;UAAA,IACLC,IAAI,GAAaD,SAAS,CAA1BC,IAAI;YAAEC,MAAM,GAAKF,SAAS,CAApBE,MAAM;UACpB,IAAMC,MAAM,GAAG1B,SAAS,CAAC2B,MAAM,CAACC,yBAAyB,CAACJ,IAAI,EAAEC,MAAM,CAAC;UACvE,IAAIC,MAAM,EAAE;YACVjB,KAAA,CAAKoB,QAAQ,CAACH,MAAM,CAAC;UACvB;QACF;MACF,CAAC;MAAAjB,KAAA,CAkIDqB,uBAAuB,GAAG,SAAAC,QAAMC,GAAG;QAAA,IAAA/C,sBAAA;QAAA,OAAAgD,mBAAA,CAAAC,KAAA,UAAAC,SAAAC,QAAA;UAAA;YAAA,QAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;cAAA;gBACzBrD,sBAAsB,GAAKwB,KAAA,CAAK/B,KAAK,CAArCO,sBAAsB;gBAAA,KAC1BA,sBAAsB;kBAAAmD,QAAA,CAAAE,IAAA;kBAAA;gBAAA;gBAAAF,QAAA,CAAAC,IAAA;gBAAAD,QAAA,CAAAE,IAAA;gBAAA,OAAAL,mBAAA,CAAAM,KAAA,CAEhBtD,sBAAsB,CAAC+C,GAAG,CAAC;cAAA;gBAAAI,QAAA,CAAAE,IAAA;gBAAA;cAAA;gBAAAF,QAAA,CAAAC,IAAA;gBAAAD,QAAA,CAAAI,EAAA,GAAAJ,QAAA;gBAEjCtD,OAAO,CAACC,IAAI,CAAC,+KAA+K,CAAC;cAAC;cAAA;gBAAA,OAAAqD,QAAA,CAAAK,IAAA;YAAA;UAAA;QAAA;MAAA,CAGnM;MAAAhC,KAAA,CAcDoB,QAAQ,GAAG,UAAAH,MAAM,EAAI;QACnB,IAAIjB,KAAA,CAAK/B,KAAK,CAACC,UAAU,EAAE;UACzB,OAAO8B,KAAA,CAAK/B,KAAK,CAACC,UAAU,CAACkD,QAAQ,CAACH,MAAM,CAAC;QAC/C;QAGAjB,KAAA,CAAKiC,SAAS,GAAGjC,KAAA,CAAKiC,SAAS,IAAIjC,KAAA,CAAKkC,KAAK,CAACX,GAAG;QACjD,IAAMY,YAAY,GAAGnC,KAAA,CAAKiC,SAAS;QACnCpE,SAAS,CAACsE,YAAY,EAAE,0CAA0C,CAAC;QACnE,IAAMC,YAAY,GAAG7C,SAAS,CAAC2B,MAAM,CAACmB,iBAAiB,CAACpB,MAAM,EAAEkB,YAAY,CAAC;QAC7E,IAAMG,QAAQ,GAAGF,YAAY,KAAK,IAAI,GAAGD,YAAY,GAAGC,YAAY;QAEpE,IAAMG,oBAAoB,GAAG,SAAvBA,oBAAoBA,CAAA,EAAS;UACjCvC,KAAA,CAAKM,uBAAuB,CAACkC,OAAO,CAAC,UAAAC,UAAU;YAAA,OAAIA,UAAU,CAAC;cAC5DC,IAAI,EAAE,QAAQ;cACdzB,MAAM,EAANA,MAAM;cACNiB,KAAK,EAAEI,QAAQ;cACfK,SAAS,EAAER;YACb,CAAC,CAAC;UAAA,EAAC;QACL,CAAC;QAED,IAAIC,YAAY,KAAK,IAAI,EAAE;UAGzBG,oBAAoB,EAAE;UACtB,OAAO,IAAI;QACb;QAEA,IAAID,QAAQ,KAAKH,YAAY,EAAE;UAE7BnC,KAAA,CAAKiC,SAAS,GAAGK,QAAQ;UACzBtC,KAAA,CAAK4C,QAAQ,CAAC;YAAErB,GAAG,EAAEe;UAAS,CAAC,EAAE,YAAM;YACrCtC,KAAA,CAAK6C,wBAAwB,CAACV,YAAY,EAAEG,QAAQ,EAAErB,MAAM,CAAC;YAC7DsB,oBAAoB,EAAE;YACtBvC,KAAA,CAAKqB,uBAAuB,CAACiB,QAAQ,CAAC;UACxC,CAAC,CAAC;UACF,OAAO,IAAI;QACb;QAEAC,oBAAoB,EAAE;QACtB,OAAO,KAAK;MACd,CAAC;MAAAvC,KAAA,CAED8C,eAAe,GAAG;QAAA,OAAM9C,KAAA,CAAK/B,KAAK,CAACM,WAAW;MAAA;MAAAyB,KAAA,CAE9C+C,SAAS,GAAG,YAAM;QAChB,IAAI/C,KAAA,CAAK/B,KAAK,CAACS,KAAK,KAAK,OAAO,IAAIsB,KAAA,CAAK/B,KAAK,CAACS,KAAK,KAAK,MAAM,EAAE;UAC/D,OAAOsB,KAAA,CAAK/B,KAAK,CAACS,KAAK;QACzB,CAAC,MAAM,IAAIsB,KAAA,CAAK/B,KAAK,CAACS,KAAK,KAAK,eAAe,EAAE;UAC/C,OAAO,OAAO;QAChB,CAAC,MAAM;UACLL,OAAO,CAACC,IAAI,8BAA4B0B,KAAA,CAAK/B,KAAK,CAACS,KAAK,sEAAmE;UAC3H,OAAO,OAAO;QAChB;MACF,CAAC;MA1PCP,aAAa,CAACF,KAAK,CAAC;MAEpB+B,KAAA,CAAKgD,cAAc,GAAGxF,iBAAiB,CAACyF,IAAI,EAAE;MAE9C,IAAIjD,KAAA,CAAKkD,WAAW,EAAE,IAAI3F,WAAW,IAAI,OAAOA,WAAW,CAAC4F,gBAAgB,KAAK,UAAU,EAAE;QAC3FnD,KAAA,CAAKK,IAAI,GAAG9C,WAAW,CAAC4F,gBAAgB,CAAC,mBAAmB,EAAE,YAAM;UAClE,IAAI,CAACnD,KAAA,CAAKoD,UAAU,EAAE;YACpBpD,KAAA,CAAKK,IAAI,IAAIL,KAAA,CAAKK,IAAI,CAACgD,MAAM,EAAE;UACjC,CAAC,MAAM;YAIL,OAAOrD,KAAA,CAAKoB,QAAQ,CAAC5D,iBAAiB,CAAC8F,IAAI,EAAE,CAAC;UAChD;QACF,CAAC,CAAC;MACJ;MAEAtD,KAAA,CAAKkC,KAAK,GAAG;QACXX,GAAG,EAAEvB,KAAA,CAAKkD,WAAW,EAAE,IAAI,CAACjF,KAAK,CAACQ,mBAAmB,GAAGc,SAAS,CAAC2B,MAAM,CAACmB,iBAAiB,CAACrC,KAAA,CAAKgD,cAAc,CAAC,GAAG;MACpH,CAAC;MAAC,OAAAhD,KAAA;IACJ;IAACL,YAAA,CAAAH,mBAAA;MAAAI,GAAA;MAAAC,KAAA,WAAA0D,eAAA,EAEgB;QACf,OAAO,IAAI,CAACtF,KAAK,CAACuF,yBAAyB,GAAG,IAAI,CAACvF,KAAK,CAACuF,yBAAyB,EAAE,GAAG,IAAI;MAC7F;IAAC;MAAA5D,GAAA;MAAAC,KAAA,WAAAqD,YAAA,EAEa;QACZ,OAAOlF,UAAU,CAAC,IAAI,CAACC,KAAK,CAAC;MAC/B;IAAC;MAAA2B,GAAA;MAAAC,KAAA,WAAAgD,yBAiBwBY,OAAO,EAAElC,GAAG,EAAEN,MAAM,EAAE;QAC7C,IAAI,OAAO,IAAI,CAAChD,KAAK,CAACyF,uBAAuB,KAAK,WAAW,IAAI,IAAI,CAACR,WAAW,EAAE,IAAI,CAAC,CAACS,OAAO,CAACC,GAAG,CAACC,iBAAiB,EAAE;UACtH,IAAIxF,OAAO,CAACyF,KAAK,EAAE;YACjBzF,OAAO,CAACyF,KAAK,CAAC,uBAAuB,CAAC;YACtCzF,OAAO,CAAC0F,GAAG,CAAC,UAAU,EAAE9C,MAAM,CAAC;YAC/B5C,OAAO,CAAC0F,GAAG,CAAC,aAAa,EAAExC,GAAG,CAAC;YAC/BlD,OAAO,CAAC0F,GAAG,CAAC,cAAc,EAAEN,OAAO,CAAC;YACpCpF,OAAO,CAAC2F,QAAQ,EAAE;UACpB,CAAC,MAAM;YACL3F,OAAO,CAAC0F,GAAG,CAAC,uBAAuB,EAAE;cACnC9C,MAAM,EAANA,MAAM;cACNgD,QAAQ,EAAE1C,GAAG;cACboB,SAAS,EAAEc;YACb,CAAC,CAAC;UACJ;UACA;QACF;QAEA,IAAI,OAAO,IAAI,CAACxF,KAAK,CAACyF,uBAAuB,KAAK,UAAU,EAAE;UAC5D,IAAI,CAACzF,KAAK,CAACyF,uBAAuB,CAACD,OAAO,EAAElC,GAAG,EAAEN,MAAM,CAAC;QAC1D;MACF;IAAC;MAAArB,GAAA;MAAAC,KAAA,WAAAqE,mBAAA,EAEoB;QAEnB,IAAI,IAAI,CAACjC,SAAS,KAAK,IAAI,CAACC,KAAK,CAACX,GAAG,EAAE;UACrC,IAAI,CAACU,SAAS,GAAG,IAAI;QACvB;MACF;IAAC;MAAArC,GAAA;MAAAC,KAAA,WAAAsE,kBAAA;QAAA,IAAAC,MAAA;QAAA,IAAAtD,SAAA,EAAAuD,wBAAA,EAAAC,qBAAA,EAAArD,MAAA,EAAAsD,YAAA,EAAAC,UAAA,EAAAzD,IAAA,EAAAC,MAAA,EAAAyD,SAAA,EAAAC,eAAA;QAAA,OAAAlD,mBAAA,CAAAC,KAAA,UAAAkD,mBAAAC,SAAA;UAAA;YAAA,QAAAA,SAAA,CAAAhD,IAAA,GAAAgD,SAAA,CAAA/C,IAAA;cAAA;gBAGC,IAAI,CAACuB,UAAU,GAAG,IAAI;gBAAC,IAClB,IAAI,CAACF,WAAW,EAAE;kBAAA0B,SAAA,CAAA/C,IAAA;kBAAA;gBAAA;gBAAA,OAAA+C,SAAA,CAAAC,MAAA;cAAA;gBAIvB,IAAIC,OAAO,IAAI,CAAC,IAAI,CAAC7G,KAAK,CAAC8G,QAAQ,EAAE;kBACnC,IAAI5F,uBAAuB,GAAG,CAAC,EAAE;oBAG/B,IAAI7B,QAAQ,CAAC0H,EAAE,KAAK,KAAK,EAAE;sBACzB3G,OAAO,CAACC,IAAI,iKAA+JR,OAAO,CAAC,mEAAmE,CAAC,CAAG;oBAC5P;kBACF;gBACF;gBACAqB,uBAAuB,EAAE;gBACzB9B,OAAO,CAAC8F,gBAAgB,CAAC,KAAK,EAAE,IAAI,CAAC3C,cAAc,CAAC;gBAGhDM,SAAS,GAAG,IAAI;gBAChBuD,wBAAwB,GAAG,IAAI;gBAAA,MAC/B,IAAI,CAACpG,KAAK,CAAC2C,iBAAiB,KAAK,KAAK;kBAAAgE,SAAA,CAAA/C,IAAA;kBAAA;gBAAA;gBAAA+C,SAAA,CAAA/C,IAAA;gBAAA,OAAAL,mBAAA,CAAAM,KAAA,CAI9B,IAAI,CAACmD,gBAAgB,EAAE;cAAA;gBAAAX,qBAAA,GAAAM,SAAA,CAAAM,IAAA;gBAF/BpE,SAAS,GAAAwD,qBAAA,CAATxD,SAAS;gBACTuD,wBAAwB,GAAAC,qBAAA,CAAxBD,wBAAwB;cAAA;gBAOxBpD,MAAM,GAAG,IAAI,CAAC+B,cAAc;gBAC5BuB,YAAY,GAAG,IAAI,CAACrC,KAAK,CAACX,GAAG;gBACjC,IAAI,CAACgD,YAAY,IAAI,CAACF,wBAAwB,EAAE;kBAC9C,CAAC,CAACV,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAIxF,OAAO,CAAC0F,GAAG,CAAC,2BAA2B,CAAC;kBAC3EQ,YAAY,GAAGhF,SAAS,CAAC2B,MAAM,CAACmB,iBAAiB,CAACpB,MAAM,CAAC;gBAC3D;gBAGA,IAAIoD,wBAAwB,EAAE;kBAC5BE,YAAY,GAAGF,wBAAwB;kBACvChF,gCAAgC,GAAG,IAAI;gBACzC;gBAGA,IAAIyB,SAAS,EAAE;kBAAA0D,UAAA,GACY1D,SAAS,EAA1BC,IAAI,GAAAyD,UAAA,CAAJzD,IAAI,EAAEC,MAAM,GAAAwD,UAAA,CAANxD,MAAM;kBACdyD,SAAS,GAAGlF,SAAS,CAAC2B,MAAM,CAACC,yBAAyB,CAACJ,IAAI,EAAEC,MAAM,CAAC;kBAC1E,IAAIyD,SAAS,EAAE;oBACb,CAAC,CAACd,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAIxF,OAAO,CAAC0F,GAAG,CAAC,6CAA6C,EAAEjD,SAAS,CAAC;oBACxGG,MAAM,GAAGwD,SAAS;oBAClBF,YAAY,GAAGhF,SAAS,CAAC2B,MAAM,CAACmB,iBAAiB,CAACoC,SAAS,EAAEF,YAAY,CAAC;kBAC5E;gBACF;gBAEMG,eAAe,GAAG,SAAlBA,eAAeA,CAAA;kBAAA,OAASN,MAAI,CAAC9D,uBAAuB,CAACkC,OAAO,CAAC,UAAAC,UAAU;oBAAA,OAAIA,UAAU,CAAC;sBAC1FC,IAAI,EAAE,QAAQ;sBACdzB,MAAM,EAANA,MAAM;sBACNiB,KAAK,EAAEkC,MAAI,CAAClC,KAAK,CAACX,GAAG;sBACrBoB,SAAS,EAAE;oBACb,CAAC,CAAC;kBAAA,EAAC;gBAAA;gBAAA,MAEC4B,YAAY,KAAK,IAAI,CAACrC,KAAK,CAACX,GAAG;kBAAAqD,SAAA,CAAA/C,IAAA;kBAAA;gBAAA;gBACjC6C,eAAe,EAAE;gBAAC,OAAAE,SAAA,CAAAC,MAAA;cAAA;gBAKpB,IAAI,CAACjC,QAAQ,CAAC;kBAAErB,GAAG,EAAEgD;gBAAa,CAAC,EAAE,YAAM;kBACzClF,gCAAgC,GAAG,KAAK;kBACxCqF,eAAe,EAAE;gBACnB,CAAC,CAAC;cAAC;cAAA;gBAAA,OAAAE,SAAA,CAAA5C,IAAA;YAAA;UAAA;QAAA;MAAA;IAAA;MAAApC,GAAA;MAAAC,KAAA,WAAAoF,iBAAA;QAAA,IAAAE,YAAA,EAAAtE,SAAA,EAAApC,mBAAA,EAAAiC,GAAA,EAAA0E,cAAA,EAAAC,kBAAA,EAAAC,mBAAA;QAAA,OAAA9D,mBAAA,CAAAC,KAAA,UAAA8D,kBAAAC,SAAA;UAAA;YAAA,QAAAA,SAAA,CAAA5D,IAAA,GAAA4D,SAAA,CAAA3D,IAAA;cAAA;gBAAAsD,YAAA,GAIwC,IAAI,CAAClH,KAAK,EAA7C4C,SAAS,GAAAsE,YAAA,CAATtE,SAAS,EAAEpC,mBAAmB,GAAA0G,YAAA,CAAnB1G,mBAAmB;gBAAA+G,SAAA,CAAA5D,IAAA;gBAAA4D,SAAA,CAAA3D,IAAA;gBAAA,OAAAL,mBAAA,CAAAM,KAAA,CAGN2D,OAAO,CAACC,GAAG,CAAC,CAACrI,OAAO,CAACsI,aAAa,EAAE,EAAElH,mBAAmB,IAAIA,mBAAmB,EAAE,CAAC,CAAC;cAAA;gBAAA4G,kBAAA,GAAAG,SAAA,CAAAN,IAAA;gBAAAI,mBAAA,GAAAM,cAAA,CAAAP,kBAAA;gBAAjH3E,GAAG,GAAA4E,mBAAA;gBAAEF,cAAc,GAAAE,mBAAA;gBAAAE,SAAA,CAAA3D,IAAA;gBAAA;cAAA;gBAAA2D,SAAA,CAAA5D,IAAA;gBAAA4D,SAAA,CAAAzD,EAAA,GAAAyD,SAAA;cAAA;gBAAA,OAAAA,SAAA,CAAAX,MAAA,WAIf;kBACL/D,SAAS,EAAEJ,GAAG,IAAI3C,kBAAkB,CAAC2C,GAAG,EAAEG,SAAS,CAAC;kBACpDwD,wBAAwB,EAAEe;gBAC5B,CAAC;cAAA;cAAA;gBAAA,OAAAI,SAAA,CAAAxD,IAAA;YAAA;UAAA;QAAA;MAAA;IAAA;MAAApC,GAAA;MAAAC,KAAA,WAAAgG,kBAGeC,CAAC,EAAE;QACnB,IAAIzG,gCAAgC,EAAE;UACpCA,gCAAgC,GAAG,KAAK;UACxChB,OAAO,CAACC,IAAI,CAAC,gIAAgI,CAAC;UAC9I,IAAI,CAAC8C,QAAQ,CAAC5D,iBAAiB,CAACyF,IAAI,EAAE,CAAC;QACzC,CAAC,MAAM;UACL,MAAM6C,CAAC;QACT;MACF;IAAC;MAAAlG,GAAA;MAAAC,KAAA,WAAAkG,qBAAA,EAasB;QACrB,IAAI,CAAC3C,UAAU,GAAG,KAAK;QACvB/F,OAAO,CAAC2I,mBAAmB,CAAC,KAAK,EAAE,IAAI,CAACxF,cAAc,CAAC;QACvD,IAAI,CAACH,IAAI,IAAI,IAAI,CAACA,IAAI,CAACgD,MAAM,EAAE;QAE/B,IAAI,IAAI,CAACH,WAAW,EAAE,EAAE;UACtB/D,uBAAuB,EAAE;QAC3B;MACF;IAAC;MAAAS,GAAA;MAAAC,KAAA,WAAAoG,OAAA,EA4DQ;QAAA,IAAAC,MAAA;QACP,IAAIhI,UAAU,GAAG,IAAI,CAACD,KAAK,CAACC,UAAU;QACtC,IAAI,IAAI,CAACgF,WAAW,EAAE,EAAE;UACtB,IAAMZ,QAAQ,GAAG,IAAI,CAACJ,KAAK,CAACX,GAAG;UAC/B,IAAI,CAACe,QAAQ,EAAE;YACb,OAAO,IAAI,CAACiB,cAAc,EAAE;UAC9B;UACA,IAAI,CAAC,IAAI,CAAC4C,WAAW,IAAI,IAAI,CAACA,WAAW,CAACjE,KAAK,KAAKI,QAAQ,EAAE;YAC5D,IAAI,CAAC6D,WAAW,GAAGxI,aAAa,CAAC4B,SAAS,CAAC2B,MAAM,EAAEoB,QAAQ,EAAE,IAAI,CAAClB,QAAQ,EAAE,IAAI,CAACd,uBAAuB,EAAE,IAAI,CAACwC,eAAe,EAAE;cAAA,OAAMoD,MAAI,CAACC,WAAW;YAAA,EAAC;UACzJ;UACAjI,UAAU,GAAG,IAAI,CAACiI,WAAW;QAC/B;QACAtI,SAAS,CAACK,UAAU,EAAE,0BAA0B,CAAC;QAEjD,OAAOd,KAAA,CAAAgJ,aAAA,CAAC3I,aAAa;UAACoC,KAAK,EAAE,IAAI,CAACkD,SAAS,EAAG;UAAAsD,QAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;UAAA;QAAA,GAC1CpJ,KAAA,CAAAgJ,aAAA,CAACxI,kBAAkB;UAACiC,KAAK,EAAE3B,UAAW;UAAAmI,QAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;UAAA;QAAA,GACpCpJ,KAAA,CAAAgJ,aAAA,CAAC7G,SAAS,EAAAkH,QAAA,KAAK,IAAI,CAACxI,KAAK;UAAEC,UAAU,EAAEA,UAAW;UAAAmI,QAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;UAAA;QAAA,GAAG,CAClC,CACP;MACpB;IAAC;IAAA,OAAAhH,mBAAA;EAAA,EAnS+BpC,KAAK,CAACmC,SAAS;EAA3CC,mBAAmB,CAGhB0B,MAAM,GAAG3B,SAAS,CAAC2B,MAAM;EAH5B1B,mBAAmB,CAIhBkH,iBAAiB,GAAG,IAAI;EAJ3BlH,mBAAmB,CAMhBmH,YAAY,GAAG;IACpBjI,KAAK,EAAE;EACT,CAAC;EA8RH,OAAOc,mBAAmB;AAC5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}