{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { EventEmitter, Platform, UnavailabilityError } from '@unimodules/core';\nimport ExpoScreenOrientation from \"./ExpoScreenOrientation\";\nimport { Orientation, OrientationLock, SizeClassIOS, WebOrientationLock } from \"./ScreenOrientation.types\";\nexport { Orientation, OrientationLock, SizeClassIOS, WebOrientationLock };\nvar _orientationChangeEmitter = new EventEmitter(ExpoScreenOrientation);\nvar _orientationChangeSubscribers = [];\nvar _lastOrientationLock = OrientationLock.UNKNOWN;\nexport function allow(orientationLock) {\n  console.warn(\"'ScreenOrientation.allow' is deprecated in favour of 'ScreenOrientation.lockAsync' and will be removed in SDK 35 or later\");\n  lockAsync(orientationLock);\n}\nexport function allowAsync(orientationLock) {\n  return _regeneratorRuntime.async(function allowAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.warn(\"'ScreenOrientation.allowAsync' is deprecated in favour of 'ScreenOrientation.lockAsync'\");\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(lockAsync(orientationLock));\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n}\nexport function lockAsync(orientationLock) {\n  var orientationLocks;\n  return _regeneratorRuntime.async(function lockAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (ExpoScreenOrientation.lockAsync) {\n            _context2.next = 2;\n            break;\n          }\n          throw new UnavailabilityError('ScreenOrientation', 'lockAsync');\n        case 2:\n          orientationLocks = Object.values(OrientationLock);\n          if (orientationLocks.includes(orientationLock)) {\n            _context2.next = 5;\n            break;\n          }\n          throw new TypeError(\"Invalid Orientation Lock: \" + orientationLock);\n        case 5:\n          if (!(orientationLock === OrientationLock.OTHER)) {\n            _context2.next = 7;\n            break;\n          }\n          return _context2.abrupt(\"return\");\n        case 7:\n          _context2.next = 9;\n          return _regeneratorRuntime.awrap(ExpoScreenOrientation.lockAsync(orientationLock));\n        case 9:\n          _lastOrientationLock = orientationLock;\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  });\n}\nexport function lockPlatformAsync(options) {\n  var screenOrientationConstantAndroid, screenOrientationArrayIOS, screenOrientationLockWeb, platformOrientationParam, orientations, _iterator, _isArray, _i, _ref, _orientation, webOrientationLocks;\n  return regeneratorRuntime.async(function lockPlatformAsync$(_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        if (ExpoScreenOrientation.lockPlatformAsync) {\n          _context3.next = 2;\n          break;\n        }\n        throw new UnavailabilityError('ScreenOrientation', 'lockPlatformAsync');\n      case 2:\n        screenOrientationConstantAndroid = options.screenOrientationConstantAndroid, screenOrientationArrayIOS = options.screenOrientationArrayIOS, screenOrientationLockWeb = options.screenOrientationLockWeb;\n        if (!(Platform.OS === 'android' && screenOrientationConstantAndroid)) {\n          _context3.next = 9;\n          break;\n        }\n        if (!isNaN(screenOrientationConstantAndroid)) {\n          _context3.next = 6;\n          break;\n        }\n        throw new TypeError(\"lockPlatformAsync Android platform: screenOrientationConstantAndroid cannot be called with \" + screenOrientationConstantAndroid);\n      case 6:\n        platformOrientationParam = screenOrientationConstantAndroid;\n        _context3.next = 37;\n        break;\n      case 9:\n        if (!(Platform.OS === 'ios' && screenOrientationArrayIOS)) {\n          _context3.next = 32;\n          break;\n        }\n        if (Array.isArray(screenOrientationArrayIOS)) {\n          _context3.next = 12;\n          break;\n        }\n        throw new TypeError(\"lockPlatformAsync iOS platform: screenOrientationArrayIOS cannot be called with \" + screenOrientationArrayIOS);\n      case 12:\n        orientations = Object.values(Orientation);\n        _iterator = screenOrientationArrayIOS, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();\n      case 14:\n        if (!_isArray) {\n          _context3.next = 20;\n          break;\n        }\n        if (!(_i >= _iterator.length)) {\n          _context3.next = 17;\n          break;\n        }\n        return _context3.abrupt(\"break\", 29);\n      case 17:\n        _ref = _iterator[_i++];\n        _context3.next = 24;\n        break;\n      case 20:\n        _i = _iterator.next();\n        if (!_i.done) {\n          _context3.next = 23;\n          break;\n        }\n        return _context3.abrupt(\"break\", 29);\n      case 23:\n        _ref = _i.value;\n      case 24:\n        _orientation = _ref;\n        if (orientations.includes(_orientation)) {\n          _context3.next = 27;\n          break;\n        }\n        throw new TypeError(`lockPlatformAsync iOS platform: ${_orientation} is not a valid Orientation`);\n      case 27:\n        _context3.next = 14;\n        break;\n      case 29:\n        platformOrientationParam = screenOrientationArrayIOS;\n        _context3.next = 37;\n        break;\n      case 32:\n        if (!(Platform.OS === 'web' && screenOrientationLockWeb)) {\n          _context3.next = 37;\n          break;\n        }\n        webOrientationLocks = Object.values(WebOrientationLock);\n        if (webOrientationLocks.includes(screenOrientationLockWeb)) {\n          _context3.next = 36;\n          break;\n        }\n        throw new TypeError(`Invalid Web Orientation Lock: ${screenOrientationLockWeb}`);\n      case 36:\n        platformOrientationParam = screenOrientationLockWeb;\n      case 37:\n        if (platformOrientationParam) {\n          _context3.next = 39;\n          break;\n        }\n        throw new TypeError('lockPlatformAsync cannot be called with undefined option properties');\n      case 39:\n        _context3.next = 41;\n        return regeneratorRuntime.awrap(ExpoScreenOrientation.lockPlatformAsync(platformOrientationParam));\n      case 41:\n        _lastOrientationLock = OrientationLock.OTHER;\n      case 42:\n      case \"end\":\n        return _context3.stop();\n    }\n  });\n}\nexport async function unlockAsync() {\n  if (!ExpoScreenOrientation.unlockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'unlockAsync');\n  }\n  await ExpoScreenOrientation.unlockAsync();\n}\nexport async function getOrientationAsync() {\n  if (!ExpoScreenOrientation.getOrientationAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'getOrientationAsync');\n  }\n  return await ExpoScreenOrientation.getOrientationAsync();\n}\nexport async function getOrientationLockAsync() {\n  if (!ExpoScreenOrientation.getOrientationLockAsync) {\n    return _lastOrientationLock;\n  }\n  return await ExpoScreenOrientation.getOrientationLockAsync();\n}\nexport async function getPlatformOrientationLockAsync() {\n  const platformOrientationLock = await ExpoScreenOrientation.getPlatformOrientationLockAsync();\n  if (Platform.OS === 'android') {\n    return {\n      screenOrientationConstantAndroid: platformOrientationLock\n    };\n  } else if (Platform.OS === 'ios') {\n    return {\n      screenOrientationArrayIOS: platformOrientationLock\n    };\n  } else if (Platform.OS === 'web') {\n    return {\n      screenOrientationLockWeb: platformOrientationLock\n    };\n  } else {\n    return {};\n  }\n}\nexport async function supportsOrientationLockAsync(orientationLock) {\n  if (!ExpoScreenOrientation.supportsOrientationLockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'supportsOrientationLockAsync');\n  }\n  const orientationLocks = Object.values(OrientationLock);\n  if (!orientationLocks.includes(orientationLock)) {\n    throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n  }\n  return await ExpoScreenOrientation.supportsOrientationLockAsync(orientationLock);\n}\nexport async function doesSupportAsync(orientationLock) {\n  console.warn(\"'ScreenOrientation.doesSupportAsync' is deprecated in favour of 'ScreenOrientation.supportsOrientationLockAsync'\");\n  return await supportsOrientationLockAsync(orientationLock);\n}\nfunction getEventName() {\n  return Platform.OS === 'ios' || Platform.OS === 'web' ? 'expoDidUpdateDimensions' : 'didUpdateDimensions';\n}\nexport function addOrientationChangeListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError(`addOrientationChangeListener cannot be called with ${listener}`);\n  }\n  const subscription = _orientationChangeEmitter.addListener(getEventName(), async update => {\n    let orientationInfo, orientationLock;\n    if (Platform.OS === 'ios' || Platform.OS === 'web') {\n      orientationLock = update.orientationLock;\n      orientationInfo = update.orientationInfo;\n    } else {\n      [orientationLock, orientationInfo] = await Promise.all([getOrientationLockAsync(), getOrientationAsync()]);\n    }\n    listener({\n      orientationInfo,\n      orientationLock\n    });\n  });\n  _orientationChangeSubscribers.push(subscription);\n  return subscription;\n}\nexport function removeOrientationChangeListeners() {\n  let i = _orientationChangeSubscribers.length;\n  while (i--) {\n    const subscriber = _orientationChangeSubscribers[i];\n    subscriber.remove();\n    _orientationChangeSubscribers.pop();\n  }\n}\nexport function removeOrientationChangeListener(subscription) {\n  if (!subscription || !subscription.remove) {\n    throw new TypeError(`Must pass in a valid subscription`);\n  }\n  subscription.remove();\n  _orientationChangeSubscribers = _orientationChangeSubscribers.filter(sub => sub !== subscription);\n}","map":{"version":3,"names":["EventEmitter","Platform","UnavailabilityError","ExpoScreenOrientation","Orientation","OrientationLock","SizeClassIOS","WebOrientationLock","_orientationChangeEmitter","_orientationChangeSubscribers","_lastOrientationLock","UNKNOWN","allow","orientationLock","console","warn","lockAsync","allowAsync","_regeneratorRuntime","async","allowAsync$","_context","prev","next","awrap","stop","orientationLocks","lockAsync$","_context2","Object","values","includes","TypeError","OTHER","abrupt","lockPlatformAsync","options","screenOrientationConstantAndroid","screenOrientationArrayIOS","screenOrientationLockWeb","platformOrientationParam","orientations","_iterator","_isArray","_i","_ref","_orientation","webOrientationLocks","regeneratorRuntime","lockPlatformAsync$","_context3","OS","isNaN","Array","isArray","Symbol","iterator","length","done","value","orientation","unlockAsync","getOrientationAsync","getOrientationLockAsync","getPlatformOrientationLockAsync","platformOrientationLock","supportsOrientationLockAsync","doesSupportAsync","getEventName","addOrientationChangeListener","listener","subscription","addListener","update","orientationInfo","Promise","all","push","removeOrientationChangeListeners","i","subscriber","remove","pop","removeOrientationChangeListener","filter","sub"],"sources":["/Users/sammerinio/Documents/flight-tracking-app/node_modules/expo/src/ScreenOrientation/ScreenOrientation.ts"],"sourcesContent":["import { EventEmitter, Platform, Subscription, UnavailabilityError } from '@unimodules/core';\n\nimport ExpoScreenOrientation from './ExpoScreenOrientation';\nimport {\n  Orientation,\n  OrientationChangeEvent,\n  OrientationChangeListener,\n  OrientationInfo,\n  OrientationLock,\n  PlatformOrientationInfo,\n  SizeClassIOS,\n  WebOrientationLock,\n} from './ScreenOrientation.types';\n\nexport {\n  Orientation,\n  OrientationLock,\n  SizeClassIOS,\n  OrientationInfo,\n  PlatformOrientationInfo,\n  OrientationChangeListener,\n  OrientationChangeEvent,\n  WebOrientationLock,\n};\n\nconst _orientationChangeEmitter = new EventEmitter(ExpoScreenOrientation);\nlet _orientationChangeSubscribers: Subscription[] = [];\n\nlet _lastOrientationLock: OrientationLock = OrientationLock.UNKNOWN;\n\nexport function allow(orientationLock: OrientationLock): void {\n  console.warn(\n    \"'ScreenOrientation.allow' is deprecated in favour of 'ScreenOrientation.lockAsync' and will be removed in SDK 35 or later\"\n  );\n  lockAsync(orientationLock);\n}\n\nexport async function allowAsync(orientationLock: OrientationLock): Promise<void> {\n  console.warn(\n    \"'ScreenOrientation.allowAsync' is deprecated in favour of 'ScreenOrientation.lockAsync'\"\n  );\n  await lockAsync(orientationLock);\n}\n\nexport async function lockAsync(orientationLock: OrientationLock): Promise<void> {\n  if (!ExpoScreenOrientation.lockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'lockAsync');\n  }\n\n  const orientationLocks = Object.values(OrientationLock);\n  if (!orientationLocks.includes(orientationLock)) {\n    throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n  }\n\n  if (orientationLock === OrientationLock.OTHER) {\n    return;\n  }\n\n  await ExpoScreenOrientation.lockAsync(orientationLock);\n  _lastOrientationLock = orientationLock;\n}\n\nexport async function lockPlatformAsync(options: PlatformOrientationInfo): Promise<void> {\n  if (!ExpoScreenOrientation.lockPlatformAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'lockPlatformAsync');\n  }\n\n  const {\n    screenOrientationConstantAndroid,\n    screenOrientationArrayIOS,\n    screenOrientationLockWeb,\n  } = options;\n  let platformOrientationParam: any;\n  if (Platform.OS === 'android' && screenOrientationConstantAndroid) {\n    if (isNaN(screenOrientationConstantAndroid)) {\n      throw new TypeError(\n        `lockPlatformAsync Android platform: screenOrientationConstantAndroid cannot be called with ${screenOrientationConstantAndroid}`\n      );\n    }\n    platformOrientationParam = screenOrientationConstantAndroid;\n  } else if (Platform.OS === 'ios' && screenOrientationArrayIOS) {\n    if (!Array.isArray(screenOrientationArrayIOS)) {\n      throw new TypeError(\n        `lockPlatformAsync iOS platform: screenOrientationArrayIOS cannot be called with ${screenOrientationArrayIOS}`\n      );\n    }\n\n    const orientations = Object.values(Orientation);\n    for (let orientation of screenOrientationArrayIOS) {\n      if (!orientations.includes(orientation)) {\n        throw new TypeError(\n          `lockPlatformAsync iOS platform: ${orientation} is not a valid Orientation`\n        );\n      }\n    }\n    platformOrientationParam = screenOrientationArrayIOS;\n  } else if (Platform.OS === 'web' && screenOrientationLockWeb) {\n    const webOrientationLocks = Object.values(WebOrientationLock);\n    if (!webOrientationLocks.includes(screenOrientationLockWeb)) {\n      throw new TypeError(`Invalid Web Orientation Lock: ${screenOrientationLockWeb}`);\n    }\n    platformOrientationParam = screenOrientationLockWeb;\n  }\n\n  if (!platformOrientationParam) {\n    throw new TypeError('lockPlatformAsync cannot be called with undefined option properties');\n  }\n  await ExpoScreenOrientation.lockPlatformAsync(platformOrientationParam);\n  _lastOrientationLock = OrientationLock.OTHER;\n}\n\nexport async function unlockAsync(): Promise<void> {\n  if (!ExpoScreenOrientation.unlockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'unlockAsync');\n  }\n  await ExpoScreenOrientation.unlockAsync();\n}\n\nexport async function getOrientationAsync(): Promise<OrientationInfo> {\n  if (!ExpoScreenOrientation.getOrientationAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'getOrientationAsync');\n  }\n  return await ExpoScreenOrientation.getOrientationAsync();\n}\n\nexport async function getOrientationLockAsync(): Promise<OrientationLock> {\n  if (!ExpoScreenOrientation.getOrientationLockAsync) {\n    return _lastOrientationLock;\n  }\n  return await ExpoScreenOrientation.getOrientationLockAsync();\n}\n\nexport async function getPlatformOrientationLockAsync(): Promise<PlatformOrientationInfo> {\n  const platformOrientationLock = await ExpoScreenOrientation.getPlatformOrientationLockAsync();\n  if (Platform.OS === 'android') {\n    return {\n      screenOrientationConstantAndroid: platformOrientationLock,\n    };\n  } else if (Platform.OS === 'ios') {\n    return {\n      screenOrientationArrayIOS: platformOrientationLock,\n    };\n  } else if (Platform.OS === 'web') {\n    return {\n      screenOrientationLockWeb: platformOrientationLock,\n    };\n  } else {\n    return {};\n  }\n}\n\nexport async function supportsOrientationLockAsync(\n  orientationLock: OrientationLock\n): Promise<boolean> {\n  if (!ExpoScreenOrientation.supportsOrientationLockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'supportsOrientationLockAsync');\n  }\n\n  const orientationLocks = Object.values(OrientationLock);\n  if (!orientationLocks.includes(orientationLock)) {\n    throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n  }\n\n  return await ExpoScreenOrientation.supportsOrientationLockAsync(orientationLock);\n}\n\nexport async function doesSupportAsync(orientationLock: OrientationLock): Promise<boolean> {\n  console.warn(\n    \"'ScreenOrientation.doesSupportAsync' is deprecated in favour of 'ScreenOrientation.supportsOrientationLockAsync'\"\n  );\n  return await supportsOrientationLockAsync(orientationLock);\n}\n\n// Determine the event name lazily so Jest can set up mocks in advance\nfunction getEventName(): string {\n  return Platform.OS === 'ios' || Platform.OS === 'web'\n    ? 'expoDidUpdateDimensions'\n    : 'didUpdateDimensions';\n}\n\n// We rely on RN to emit `didUpdateDimensions`\n// If this method no longer works, it's possible that the underlying RN implementation has changed\n// see https://github.com/facebook/react-native/blob/c31f79fe478b882540d7fd31ee37b53ddbd60a17/ReactAndroid/src/main/java/com/facebook/react/modules/deviceinfo/DeviceInfoModule.java#L90\nexport function addOrientationChangeListener(listener: OrientationChangeListener): Subscription {\n  if (typeof listener !== 'function') {\n    throw new TypeError(`addOrientationChangeListener cannot be called with ${listener}`);\n  }\n  const subscription = _orientationChangeEmitter.addListener(\n    getEventName(),\n    async (update: OrientationChangeEvent) => {\n      let orientationInfo, orientationLock;\n      if (Platform.OS === 'ios' || Platform.OS === 'web') {\n        // For iOS, RN relies on statusBarOrientation (deprecated) to emit `didUpdateDimensions` event, so we emit our own `expoDidUpdateDimensions` event instead\n        orientationLock = update.orientationLock;\n        orientationInfo = update.orientationInfo;\n      } else {\n        // We rely on the RN Dimensions to emit the `didUpdateDimensions` event on Android\n        [orientationLock, orientationInfo] = await Promise.all([\n          getOrientationLockAsync(),\n          getOrientationAsync(),\n        ]);\n      }\n      listener({ orientationInfo, orientationLock });\n    }\n  );\n  _orientationChangeSubscribers.push(subscription);\n  return subscription;\n}\n\n// We need to keep track of our own subscribers because EventEmitter uses a shared subscriber\n// from NativeEventEmitter that is registered to the same eventTypes as us. Directly calling\n// removeAllListeners(eventName) will remove other module's subscribers.\nexport function removeOrientationChangeListeners(): void {\n  // Remove listener by subscription instead of eventType to avoid clobbering Dimension module's subscription of didUpdateDimensions\n  let i = _orientationChangeSubscribers.length;\n  while (i--) {\n    const subscriber = _orientationChangeSubscribers[i];\n    subscriber.remove();\n\n    // remove after a successful unsubscribe\n    _orientationChangeSubscribers.pop();\n  }\n}\n\nexport function removeOrientationChangeListener(subscription: Subscription): void {\n  if (!subscription || !subscription.remove) {\n    throw new TypeError(`Must pass in a valid subscription`);\n  }\n  subscription.remove();\n  _orientationChangeSubscribers = _orientationChangeSubscribers.filter(sub => sub !== subscription);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}